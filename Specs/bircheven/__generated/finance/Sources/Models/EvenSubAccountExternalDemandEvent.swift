//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenSubAccountExternalDemandEvent: BirchModel, Decodable, AutoEquatable {

    /** A unique, internal identifier for this resource.
 */
    public var id: Int

    public var supplySubAccountId: Int

    public var demandSubAccountId: Int

    public var attributedStart: DateDay

    public var attributedEnd: DateDay

    public var booked: DateDay

    public var eventType: EvenEventType

    /** When the resource was created.
 */
    public var createdAt: DateTime

    /** The UUID of the access token that was used to create this resource.
 */
    public var createdBy: ID

    public var amount: Double?

    /** When the resource was deleted.
 */
    public var deletedAt: DateTime?

    /** The UUID of the access token that was used to delete this resource.
 */
    public var deletedBy: ID?

    public var details: EvenDetails?

    public var eventCount: Int?

    public var externalId: String?

    public init(id: Int, supplySubAccountId: Int, demandSubAccountId: Int, attributedStart: DateDay, attributedEnd: DateDay, booked: DateDay, eventType: EvenEventType, createdAt: DateTime, createdBy: ID, amount: Double? = nil, deletedAt: DateTime? = nil, deletedBy: ID? = nil, details: EvenDetails? = nil, eventCount: Int? = nil, externalId: String? = nil) {
        self.id = id
        self.supplySubAccountId = supplySubAccountId
        self.demandSubAccountId = demandSubAccountId
        self.attributedStart = attributedStart
        self.attributedEnd = attributedEnd
        self.booked = booked
        self.eventType = eventType
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.amount = amount
        self.deletedAt = deletedAt
        self.deletedBy = deletedBy
        self.details = details
        self.eventCount = eventCount
        self.externalId = externalId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        supplySubAccountId = try container.decode("supplySubAccountId")
        demandSubAccountId = try container.decode("demandSubAccountId")
        attributedStart = try container.decode("attributedStart")
        attributedEnd = try container.decode("attributedEnd")
        booked = try container.decode("booked")
        eventType = try container.decode("eventType")
        createdAt = try container.decode("createdAt")
        createdBy = try container.decode("createdBy")
        amount = try container.decodeIfPresent("amount")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedBy = try container.decodeIfPresent("deletedBy")
        details = try container.decodeIfPresent("details")
        eventCount = try container.decodeIfPresent("eventCount")
        externalId = try container.decodeIfPresent("externalId")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(supplySubAccountId, forKey: "supplySubAccountId")
        try container.encode(demandSubAccountId, forKey: "demandSubAccountId")
        try container.encode(attributedStart, forKey: "attributedStart")
        try container.encode(attributedEnd, forKey: "attributedEnd")
        try container.encode(booked, forKey: "booked")
        try container.encode(eventType, forKey: "eventType")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedBy, forKey: "deletedBy")
        try container.encodeIfPresent(details, forKey: "details")
        try container.encodeIfPresent(eventCount, forKey: "eventCount")
        try container.encodeIfPresent(externalId, forKey: "externalId")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenSubAccountExternalDemandEvent else { return false }
      guard self.id == object.id else { return false }
      guard self.supplySubAccountId == object.supplySubAccountId else { return false }
      guard self.demandSubAccountId == object.demandSubAccountId else { return false }
      guard self.attributedStart == object.attributedStart else { return false }
      guard self.attributedEnd == object.attributedEnd else { return false }
      guard self.booked == object.booked else { return false }
      guard self.eventType == object.eventType else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.amount == object.amount else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedBy == object.deletedBy else { return false }
      guard self.details == object.details else { return false }
      guard self.eventCount == object.eventCount else { return false }
      guard self.externalId == object.externalId else { return false }
      return true
    }

    public static func == (lhs: EvenSubAccountExternalDemandEvent, rhs: EvenSubAccountExternalDemandEvent) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
