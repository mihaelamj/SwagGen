//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenDemandDataImportConfigurationCreateData: BirchModel, Decodable, AutoEquatable {

    public var subAccountId: Int

    public var productType: EvenProductType

    public var effectiveAt: DateTime

    public var fileType: EvenFileType

    public var leadUuidProcessorInformation: EvenAppliedTimestampProcessor

    public var details: Even0

    public var dataRow: Int?

    public var fieldNames: [String]?

    public var headerRow: Int?

    public var offerIdProcessorInformation: EvenAppliedTimestampProcessor?

    public var productSubTypeProcessorInformation: EvenAppliedTimestampProcessor?

    public var sheetNumber: Int?

    public init(subAccountId: Int, productType: EvenProductType, effectiveAt: DateTime, fileType: EvenFileType, leadUuidProcessorInformation: EvenAppliedTimestampProcessor, details: Even0, dataRow: Int? = nil, fieldNames: [String]? = nil, headerRow: Int? = nil, offerIdProcessorInformation: EvenAppliedTimestampProcessor? = nil, productSubTypeProcessorInformation: EvenAppliedTimestampProcessor? = nil, sheetNumber: Int? = nil) {
        self.subAccountId = subAccountId
        self.productType = productType
        self.effectiveAt = effectiveAt
        self.fileType = fileType
        self.leadUuidProcessorInformation = leadUuidProcessorInformation
        self.details = details
        self.dataRow = dataRow
        self.fieldNames = fieldNames
        self.headerRow = headerRow
        self.offerIdProcessorInformation = offerIdProcessorInformation
        self.productSubTypeProcessorInformation = productSubTypeProcessorInformation
        self.sheetNumber = sheetNumber
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        subAccountId = try container.decode("subAccountId")
        productType = try container.decode("productType")
        effectiveAt = try container.decode("effectiveAt")
        fileType = try container.decode("fileType")
        leadUuidProcessorInformation = try container.decode("leadUuidProcessorInformation")
        details = try container.decode("details")
        dataRow = try container.decodeIfPresent("dataRow")
        fieldNames = try container.decodeArrayIfPresent("fieldNames")
        headerRow = try container.decodeIfPresent("headerRow")
        offerIdProcessorInformation = try container.decodeIfPresent("offerIdProcessorInformation")
        productSubTypeProcessorInformation = try container.decodeIfPresent("productSubTypeProcessorInformation")
        sheetNumber = try container.decodeIfPresent("sheetNumber")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(subAccountId, forKey: "subAccountId")
        try container.encode(productType, forKey: "productType")
        try container.encode(effectiveAt, forKey: "effectiveAt")
        try container.encode(fileType, forKey: "fileType")
        try container.encode(leadUuidProcessorInformation, forKey: "leadUuidProcessorInformation")
        try container.encode(details, forKey: "details")
        try container.encodeIfPresent(dataRow, forKey: "dataRow")
        try container.encodeIfPresent(fieldNames, forKey: "fieldNames")
        try container.encodeIfPresent(headerRow, forKey: "headerRow")
        try container.encodeIfPresent(offerIdProcessorInformation, forKey: "offerIdProcessorInformation")
        try container.encodeIfPresent(productSubTypeProcessorInformation, forKey: "productSubTypeProcessorInformation")
        try container.encodeIfPresent(sheetNumber, forKey: "sheetNumber")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenDemandDataImportConfigurationCreateData else { return false }
      guard self.subAccountId == object.subAccountId else { return false }
      guard self.productType == object.productType else { return false }
      guard self.effectiveAt == object.effectiveAt else { return false }
      guard self.fileType == object.fileType else { return false }
      guard self.leadUuidProcessorInformation == object.leadUuidProcessorInformation else { return false }
      guard self.details == object.details else { return false }
      guard self.dataRow == object.dataRow else { return false }
      guard self.fieldNames == object.fieldNames else { return false }
      guard self.headerRow == object.headerRow else { return false }
      guard self.offerIdProcessorInformation == object.offerIdProcessorInformation else { return false }
      guard self.productSubTypeProcessorInformation == object.productSubTypeProcessorInformation else { return false }
      guard self.sheetNumber == object.sheetNumber else { return false }
      return true
    }

    public static func == (lhs: EvenDemandDataImportConfigurationCreateData, rhs: EvenDemandDataImportConfigurationCreateData) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
