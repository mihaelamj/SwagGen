//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenCostPerLeadBySubIdPayoutClause: BirchModel, Decodable, AutoEquatable {

    public var defaultCost: Double

    public var subIdKey: String

    public var costPerValue: [EvenItems]

    public init(defaultCost: Double, subIdKey: String, costPerValue: [EvenItems]) {
        self.defaultCost = defaultCost
        self.subIdKey = subIdKey
        self.costPerValue = costPerValue
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        defaultCost = try container.decode("defaultCost")
        subIdKey = try container.decode("subIdKey")
        costPerValue = try container.decodeArray("costPerValue")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(defaultCost, forKey: "defaultCost")
        try container.encode(subIdKey, forKey: "subIdKey")
        try container.encode(costPerValue, forKey: "costPerValue")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenCostPerLeadBySubIdPayoutClause else { return false }
      guard self.defaultCost == object.defaultCost else { return false }
      guard self.subIdKey == object.subIdKey else { return false }
      guard self.costPerValue == object.costPerValue else { return false }
      return true
    }

    public static func == (lhs: EvenCostPerLeadBySubIdPayoutClause, rhs: EvenCostPerLeadBySubIdPayoutClause) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
