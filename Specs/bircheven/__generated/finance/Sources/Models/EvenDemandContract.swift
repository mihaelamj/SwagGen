//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenDemandContract: BirchModel, Decodable, AutoEquatable {

    public var id: Int

    public var subAccountId: Int

    public var effectiveAt: DateDay

    public var revenueClauses: [EvenRevenueClause]

    public var createdAt: DateTime

    public var createdBy: ID

    public var deletedAt: DateTime?

    public var deletedBy: ID?

    public init(id: Int, subAccountId: Int, effectiveAt: DateDay, revenueClauses: [EvenRevenueClause], createdAt: DateTime, createdBy: ID, deletedAt: DateTime? = nil, deletedBy: ID? = nil) {
        self.id = id
        self.subAccountId = subAccountId
        self.effectiveAt = effectiveAt
        self.revenueClauses = revenueClauses
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.deletedAt = deletedAt
        self.deletedBy = deletedBy
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        subAccountId = try container.decode("subAccountId")
        effectiveAt = try container.decode("effectiveAt")
        revenueClauses = try container.decodeArray("revenueClauses")
        createdAt = try container.decode("createdAt")
        createdBy = try container.decode("createdBy")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedBy = try container.decodeIfPresent("deletedBy")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(subAccountId, forKey: "subAccountId")
        try container.encode(effectiveAt, forKey: "effectiveAt")
        try container.encode(revenueClauses, forKey: "revenueClauses")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedBy, forKey: "deletedBy")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenDemandContract else { return false }
      guard self.id == object.id else { return false }
      guard self.subAccountId == object.subAccountId else { return false }
      guard self.effectiveAt == object.effectiveAt else { return false }
      guard self.revenueClauses == object.revenueClauses else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedBy == object.deletedBy else { return false }
      return true
    }

    public static func == (lhs: EvenDemandContract, rhs: EvenDemandContract) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
