//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenLedgerItem: BirchModel, Decodable, AutoEquatable {

    public enum EvenReason: String, Codable, Equatable, CaseIterable {
        case standard = "standard"
        case settlement = "settlement"
        case oneOff = "oneOff"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenReason(rawValue: rawValue) ?? .undecodable
        }
    }

    public var id: Int

    public var accountId: Int

    public var amount: Double

    public var startDate: DateDay

    public var endDate: DateDay

    public var dueDate: String

    public var ledgerItemType: EvenLedgerItemType

    public var billingCycleId: Int

    public var details: [Details]

    public var createdAt: DateTime

    public var createdBy: ID

    public var deletedAt: DateTime?

    public var deletedBy: ID?

    public var memo: String?

    public var previousLedgerItemId: Int?

    public var reason: EvenReason?

    public class Details: BirchModel, Decodable, AutoEquatable {

        public var id: Int

        public var ledgerItemId: Int

        public var subAccountId: Int

        public var amount: Double

        public var createdAt: DateTime

        public var createdBy: ID

        public var contractType: String?

        public var deletedAt: DateTime?

        public var deletedBy: ID?

        public init(id: Int, ledgerItemId: Int, subAccountId: Int, amount: Double, createdAt: DateTime, createdBy: ID, contractType: String? = nil, deletedAt: DateTime? = nil, deletedBy: ID? = nil) {
            self.id = id
            self.ledgerItemId = ledgerItemId
            self.subAccountId = subAccountId
            self.amount = amount
            self.createdAt = createdAt
            self.createdBy = createdBy
            self.contractType = contractType
            self.deletedAt = deletedAt
            self.deletedBy = deletedBy
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            id = try container.decode("id")
            ledgerItemId = try container.decode("ledgerItemId")
            subAccountId = try container.decode("subAccountId")
            amount = try container.decode("amount")
            createdAt = try container.decode("createdAt")
            createdBy = try container.decode("createdBy")
            contractType = try container.decodeIfPresent("contractType")
            deletedAt = try container.decodeIfPresent("deletedAt")
            deletedBy = try container.decodeIfPresent("deletedBy")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(id, forKey: "id")
            try container.encode(ledgerItemId, forKey: "ledgerItemId")
            try container.encode(subAccountId, forKey: "subAccountId")
            try container.encode(amount, forKey: "amount")
            try container.encode(createdAt, forKey: "createdAt")
            try container.encode(createdBy, forKey: "createdBy")
            try container.encodeIfPresent(contractType, forKey: "contractType")
            try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
            try container.encodeIfPresent(deletedBy, forKey: "deletedBy")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Details else { return false }
          guard self.id == object.id else { return false }
          guard self.ledgerItemId == object.ledgerItemId else { return false }
          guard self.subAccountId == object.subAccountId else { return false }
          guard self.amount == object.amount else { return false }
          guard self.createdAt == object.createdAt else { return false }
          guard self.createdBy == object.createdBy else { return false }
          guard self.contractType == object.contractType else { return false }
          guard self.deletedAt == object.deletedAt else { return false }
          guard self.deletedBy == object.deletedBy else { return false }
          return true
        }

        public static func == (lhs: Details, rhs: Details) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(id: Int, accountId: Int, amount: Double, startDate: DateDay, endDate: DateDay, dueDate: String, ledgerItemType: EvenLedgerItemType, billingCycleId: Int, details: [Details], createdAt: DateTime, createdBy: ID, deletedAt: DateTime? = nil, deletedBy: ID? = nil, memo: String? = nil, previousLedgerItemId: Int? = nil, reason: EvenReason? = nil) {
        self.id = id
        self.accountId = accountId
        self.amount = amount
        self.startDate = startDate
        self.endDate = endDate
        self.dueDate = dueDate
        self.ledgerItemType = ledgerItemType
        self.billingCycleId = billingCycleId
        self.details = details
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.deletedAt = deletedAt
        self.deletedBy = deletedBy
        self.memo = memo
        self.previousLedgerItemId = previousLedgerItemId
        self.reason = reason
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        accountId = try container.decode("accountId")
        amount = try container.decode("amount")
        startDate = try container.decode("startDate")
        endDate = try container.decode("endDate")
        dueDate = try container.decode("dueDate")
        ledgerItemType = try container.decode("ledgerItemType")
        billingCycleId = try container.decode("billingCycleId")
        details = try container.decodeArray("details")
        createdAt = try container.decode("createdAt")
        createdBy = try container.decode("createdBy")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedBy = try container.decodeIfPresent("deletedBy")
        memo = try container.decodeIfPresent("memo")
        previousLedgerItemId = try container.decodeIfPresent("previousLedgerItemId")
        reason = try container.decodeIfPresent("reason")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(accountId, forKey: "accountId")
        try container.encode(amount, forKey: "amount")
        try container.encode(startDate, forKey: "startDate")
        try container.encode(endDate, forKey: "endDate")
        try container.encode(dueDate, forKey: "dueDate")
        try container.encode(ledgerItemType, forKey: "ledgerItemType")
        try container.encode(billingCycleId, forKey: "billingCycleId")
        try container.encode(details, forKey: "details")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedBy, forKey: "deletedBy")
        try container.encodeIfPresent(memo, forKey: "memo")
        try container.encodeIfPresent(previousLedgerItemId, forKey: "previousLedgerItemId")
        try container.encodeIfPresent(reason, forKey: "reason")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenLedgerItem else { return false }
      guard self.id == object.id else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.amount == object.amount else { return false }
      guard self.startDate == object.startDate else { return false }
      guard self.endDate == object.endDate else { return false }
      guard self.dueDate == object.dueDate else { return false }
      guard self.ledgerItemType == object.ledgerItemType else { return false }
      guard self.billingCycleId == object.billingCycleId else { return false }
      guard self.details == object.details else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedBy == object.deletedBy else { return false }
      guard self.memo == object.memo else { return false }
      guard self.previousLedgerItemId == object.previousLedgerItemId else { return false }
      guard self.reason == object.reason else { return false }
      return true
    }

    public static func == (lhs: EvenLedgerItem, rhs: EvenLedgerItem) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
