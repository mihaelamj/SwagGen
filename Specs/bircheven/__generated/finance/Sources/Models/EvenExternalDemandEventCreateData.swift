//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenExternalDemandEventCreateData: BirchModel, Decodable, AutoEquatable {

    public var subAccountId: Int

    public var leadUuid: ID

    public var eventType: EvenEventType

    public var timestamp: DateTime

    public var details: EvenDetails?

    public var offerId: Int?

    public var partnerTrackingId: Int?

    public var productSubType: EvenProductSubType?

    public init(subAccountId: Int, leadUuid: ID, eventType: EvenEventType, timestamp: DateTime, details: EvenDetails? = nil, offerId: Int? = nil, partnerTrackingId: Int? = nil, productSubType: EvenProductSubType? = nil) {
        self.subAccountId = subAccountId
        self.leadUuid = leadUuid
        self.eventType = eventType
        self.timestamp = timestamp
        self.details = details
        self.offerId = offerId
        self.partnerTrackingId = partnerTrackingId
        self.productSubType = productSubType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        subAccountId = try container.decode("subAccountId")
        leadUuid = try container.decode("leadUuid")
        eventType = try container.decode("eventType")
        timestamp = try container.decode("timestamp")
        details = try container.decodeIfPresent("details")
        offerId = try container.decodeIfPresent("offerId")
        partnerTrackingId = try container.decodeIfPresent("partnerTrackingId")
        productSubType = try container.decodeIfPresent("productSubType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(subAccountId, forKey: "subAccountId")
        try container.encode(leadUuid, forKey: "leadUuid")
        try container.encode(eventType, forKey: "eventType")
        try container.encode(timestamp, forKey: "timestamp")
        try container.encodeIfPresent(details, forKey: "details")
        try container.encodeIfPresent(offerId, forKey: "offerId")
        try container.encodeIfPresent(partnerTrackingId, forKey: "partnerTrackingId")
        try container.encodeIfPresent(productSubType, forKey: "productSubType")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenExternalDemandEventCreateData else { return false }
      guard self.subAccountId == object.subAccountId else { return false }
      guard self.leadUuid == object.leadUuid else { return false }
      guard self.eventType == object.eventType else { return false }
      guard self.timestamp == object.timestamp else { return false }
      guard self.details == object.details else { return false }
      guard self.offerId == object.offerId else { return false }
      guard self.partnerTrackingId == object.partnerTrackingId else { return false }
      guard self.productSubType == object.productSubType else { return false }
      return true
    }

    public static func == (lhs: EvenExternalDemandEventCreateData, rhs: EvenExternalDemandEventCreateData) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
