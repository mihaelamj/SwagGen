//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenCreditCardImportConfigurationDetails: BirchModel, Decodable, AutoEquatable {

    public var appliedTimestampProcessor: AppliedTimestampProcessor

    public var approvedTimestampProcessor: EvenAppliedTimestampProcessor

    public var fundedTimestampProcessor: EvenAppliedTimestampProcessor

    public var openedTimestampProcessor: EvenAppliedTimestampProcessor

    public var rejectedTimestampProcessor: EvenAppliedTimestampProcessor

    public var openedCreditLimitProcessor: EvenAppliedTimestampProcessor

    public var cardProductNameProcessor: EvenAppliedTimestampProcessor?

    public class AppliedTimestampProcessor: BirchModel, Decodable, AutoEquatable {

        public var extractorType: EvenExtractorType

        public var extractorArguments: [String]

        public var transformerTypes: [EvenItems]

        public var transformerArguments: [String]

        public init(extractorType: EvenExtractorType, extractorArguments: [String], transformerTypes: [EvenItems], transformerArguments: [String]) {
            self.extractorType = extractorType
            self.extractorArguments = extractorArguments
            self.transformerTypes = transformerTypes
            self.transformerArguments = transformerArguments
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            extractorType = try container.decode("extractorType")
            extractorArguments = try container.decodeArray("extractorArguments")
            transformerTypes = try container.decodeArray("transformerTypes")
            transformerArguments = try container.decodeArray("transformerArguments")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(extractorType, forKey: "extractorType")
            try container.encode(extractorArguments, forKey: "extractorArguments")
            try container.encode(transformerTypes, forKey: "transformerTypes")
            try container.encode(transformerArguments, forKey: "transformerArguments")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? AppliedTimestampProcessor else { return false }
          guard self.extractorType == object.extractorType else { return false }
          guard self.extractorArguments == object.extractorArguments else { return false }
          guard self.transformerTypes == object.transformerTypes else { return false }
          guard self.transformerArguments == object.transformerArguments else { return false }
          return true
        }

        public static func == (lhs: AppliedTimestampProcessor, rhs: AppliedTimestampProcessor) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(appliedTimestampProcessor: AppliedTimestampProcessor, approvedTimestampProcessor: EvenAppliedTimestampProcessor, fundedTimestampProcessor: EvenAppliedTimestampProcessor, openedTimestampProcessor: EvenAppliedTimestampProcessor, rejectedTimestampProcessor: EvenAppliedTimestampProcessor, openedCreditLimitProcessor: EvenAppliedTimestampProcessor, cardProductNameProcessor: EvenAppliedTimestampProcessor? = nil) {
        self.appliedTimestampProcessor = appliedTimestampProcessor
        self.approvedTimestampProcessor = approvedTimestampProcessor
        self.fundedTimestampProcessor = fundedTimestampProcessor
        self.openedTimestampProcessor = openedTimestampProcessor
        self.rejectedTimestampProcessor = rejectedTimestampProcessor
        self.openedCreditLimitProcessor = openedCreditLimitProcessor
        self.cardProductNameProcessor = cardProductNameProcessor
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        appliedTimestampProcessor = try container.decode("appliedTimestampProcessor")
        approvedTimestampProcessor = try container.decode("approvedTimestampProcessor")
        fundedTimestampProcessor = try container.decode("fundedTimestampProcessor")
        openedTimestampProcessor = try container.decode("openedTimestampProcessor")
        rejectedTimestampProcessor = try container.decode("rejectedTimestampProcessor")
        openedCreditLimitProcessor = try container.decode("openedCreditLimitProcessor")
        cardProductNameProcessor = try container.decodeIfPresent("cardProductNameProcessor")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(appliedTimestampProcessor, forKey: "appliedTimestampProcessor")
        try container.encode(approvedTimestampProcessor, forKey: "approvedTimestampProcessor")
        try container.encode(fundedTimestampProcessor, forKey: "fundedTimestampProcessor")
        try container.encode(openedTimestampProcessor, forKey: "openedTimestampProcessor")
        try container.encode(rejectedTimestampProcessor, forKey: "rejectedTimestampProcessor")
        try container.encode(openedCreditLimitProcessor, forKey: "openedCreditLimitProcessor")
        try container.encodeIfPresent(cardProductNameProcessor, forKey: "cardProductNameProcessor")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenCreditCardImportConfigurationDetails else { return false }
      guard self.appliedTimestampProcessor == object.appliedTimestampProcessor else { return false }
      guard self.approvedTimestampProcessor == object.approvedTimestampProcessor else { return false }
      guard self.fundedTimestampProcessor == object.fundedTimestampProcessor else { return false }
      guard self.openedTimestampProcessor == object.openedTimestampProcessor else { return false }
      guard self.rejectedTimestampProcessor == object.rejectedTimestampProcessor else { return false }
      guard self.openedCreditLimitProcessor == object.openedCreditLimitProcessor else { return false }
      guard self.cardProductNameProcessor == object.cardProductNameProcessor else { return false }
      return true
    }

    public static func == (lhs: EvenCreditCardImportConfigurationDetails, rhs: EvenCreditCardImportConfigurationDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
