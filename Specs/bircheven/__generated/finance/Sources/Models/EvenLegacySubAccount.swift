//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenLegacySubAccount: BirchModel, Decodable, AutoEquatable {

    public enum EvenSubAccountTypeKey: String, Codable, Equatable, CaseIterable {
        case supply = "supply"
        case demand = "demand"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenSubAccountTypeKey(rawValue: rawValue) ?? .undecodable
        }
    }

    public var id: Int

    public var uuid: ID

    public var accountId: Int

    public var companyUuid: ID

    public var subAccountTypeKey: EvenSubAccountTypeKey

    public var name: String

    public var displayName: String

    public var createdAt: DateTime

    public var createdBy: ID

    /** A.M. Best's rating */
    public var amBestRating: String?

    public var deletedAt: DateTime?

    public var deletedBy: ID?

    public var description: String?

    public var disclaimer: String?

    public var foundedYear: Int?

    public var imageUrl: String?

    public var notes: String?

    /** Override the default display text for indicating a pre-selected offer if shouldDisplayPreSelect is true. */
    public var preSelectTextOverride: String?

    /** Product types to identify what vertical the sub account is set for (demand only) */
    public var productType: String?

    /** Override the default auto-generated call to action subtext for issuers */
    public var subtextOverride: String?

    /** Product types to identify what vertical the sub account is set for (supply only) */
    public var supplyProductTypes: [String]?

    public var updatedAt: DateTime?

    public var updatedBy: ID?

    public init(id: Int, uuid: ID, accountId: Int, companyUuid: ID, subAccountTypeKey: EvenSubAccountTypeKey, name: String, displayName: String, createdAt: DateTime, createdBy: ID, amBestRating: String? = nil, deletedAt: DateTime? = nil, deletedBy: ID? = nil, description: String? = nil, disclaimer: String? = nil, foundedYear: Int? = nil, imageUrl: String? = nil, notes: String? = nil, preSelectTextOverride: String? = nil, productType: String? = nil, subtextOverride: String? = nil, supplyProductTypes: [String]? = nil, updatedAt: DateTime? = nil, updatedBy: ID? = nil) {
        self.id = id
        self.uuid = uuid
        self.accountId = accountId
        self.companyUuid = companyUuid
        self.subAccountTypeKey = subAccountTypeKey
        self.name = name
        self.displayName = displayName
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.amBestRating = amBestRating
        self.deletedAt = deletedAt
        self.deletedBy = deletedBy
        self.description = description
        self.disclaimer = disclaimer
        self.foundedYear = foundedYear
        self.imageUrl = imageUrl
        self.notes = notes
        self.preSelectTextOverride = preSelectTextOverride
        self.productType = productType
        self.subtextOverride = subtextOverride
        self.supplyProductTypes = supplyProductTypes
        self.updatedAt = updatedAt
        self.updatedBy = updatedBy
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        uuid = try container.decode("uuid")
        accountId = try container.decode("accountId")
        companyUuid = try container.decode("companyUuid")
        subAccountTypeKey = try container.decode("subAccountTypeKey")
        name = try container.decode("name")
        displayName = try container.decode("displayName")
        createdAt = try container.decode("createdAt")
        createdBy = try container.decode("createdBy")
        amBestRating = try container.decodeIfPresent("amBestRating")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedBy = try container.decodeIfPresent("deletedBy")
        description = try container.decodeIfPresent("description")
        disclaimer = try container.decodeIfPresent("disclaimer")
        foundedYear = try container.decodeIfPresent("foundedYear")
        imageUrl = try container.decodeIfPresent("imageUrl")
        notes = try container.decodeIfPresent("notes")
        preSelectTextOverride = try container.decodeIfPresent("preSelectTextOverride")
        productType = try container.decodeIfPresent("productType")
        subtextOverride = try container.decodeIfPresent("subtextOverride")
        supplyProductTypes = try container.decodeArrayIfPresent("supplyProductTypes")
        updatedAt = try container.decodeIfPresent("updatedAt")
        updatedBy = try container.decodeIfPresent("updatedBy")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(uuid, forKey: "uuid")
        try container.encode(accountId, forKey: "accountId")
        try container.encode(companyUuid, forKey: "companyUuid")
        try container.encode(subAccountTypeKey, forKey: "subAccountTypeKey")
        try container.encode(name, forKey: "name")
        try container.encode(displayName, forKey: "displayName")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(amBestRating, forKey: "amBestRating")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedBy, forKey: "deletedBy")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(disclaimer, forKey: "disclaimer")
        try container.encodeIfPresent(foundedYear, forKey: "foundedYear")
        try container.encodeIfPresent(imageUrl, forKey: "imageUrl")
        try container.encodeIfPresent(notes, forKey: "notes")
        try container.encodeIfPresent(preSelectTextOverride, forKey: "preSelectTextOverride")
        try container.encodeIfPresent(productType, forKey: "productType")
        try container.encodeIfPresent(subtextOverride, forKey: "subtextOverride")
        try container.encodeIfPresent(supplyProductTypes, forKey: "supplyProductTypes")
        try container.encodeIfPresent(updatedAt, forKey: "updatedAt")
        try container.encodeIfPresent(updatedBy, forKey: "updatedBy")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenLegacySubAccount else { return false }
      guard self.id == object.id else { return false }
      guard self.uuid == object.uuid else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.companyUuid == object.companyUuid else { return false }
      guard self.subAccountTypeKey == object.subAccountTypeKey else { return false }
      guard self.name == object.name else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.amBestRating == object.amBestRating else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedBy == object.deletedBy else { return false }
      guard self.description == object.description else { return false }
      guard self.disclaimer == object.disclaimer else { return false }
      guard self.foundedYear == object.foundedYear else { return false }
      guard self.imageUrl == object.imageUrl else { return false }
      guard self.notes == object.notes else { return false }
      guard self.preSelectTextOverride == object.preSelectTextOverride else { return false }
      guard self.productType == object.productType else { return false }
      guard self.subtextOverride == object.subtextOverride else { return false }
      guard self.supplyProductTypes == object.supplyProductTypes else { return false }
      guard self.updatedAt == object.updatedAt else { return false }
      guard self.updatedBy == object.updatedBy else { return false }
      return true
    }

    public static func == (lhs: EvenLegacySubAccount, rhs: EvenLegacySubAccount) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
