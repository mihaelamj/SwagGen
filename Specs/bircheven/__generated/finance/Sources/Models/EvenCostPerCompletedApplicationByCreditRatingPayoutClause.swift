//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenCostPerCompletedApplicationByCreditRatingPayoutClause: BirchModel, Decodable, AutoEquatable {

    public var defaultCost: Double

    public var excellentCost: Double?

    public var fairCost: Double?

    public var goodCost: Double?

    public var limitedCost: Double?

    public var poorCost: Double?

    public init(defaultCost: Double, excellentCost: Double? = nil, fairCost: Double? = nil, goodCost: Double? = nil, limitedCost: Double? = nil, poorCost: Double? = nil) {
        self.defaultCost = defaultCost
        self.excellentCost = excellentCost
        self.fairCost = fairCost
        self.goodCost = goodCost
        self.limitedCost = limitedCost
        self.poorCost = poorCost
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        defaultCost = try container.decode("defaultCost")
        excellentCost = try container.decodeIfPresent("excellentCost")
        fairCost = try container.decodeIfPresent("fairCost")
        goodCost = try container.decodeIfPresent("goodCost")
        limitedCost = try container.decodeIfPresent("limitedCost")
        poorCost = try container.decodeIfPresent("poorCost")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(defaultCost, forKey: "defaultCost")
        try container.encodeIfPresent(excellentCost, forKey: "excellentCost")
        try container.encodeIfPresent(fairCost, forKey: "fairCost")
        try container.encodeIfPresent(goodCost, forKey: "goodCost")
        try container.encodeIfPresent(limitedCost, forKey: "limitedCost")
        try container.encodeIfPresent(poorCost, forKey: "poorCost")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenCostPerCompletedApplicationByCreditRatingPayoutClause else { return false }
      guard self.defaultCost == object.defaultCost else { return false }
      guard self.excellentCost == object.excellentCost else { return false }
      guard self.fairCost == object.fairCost else { return false }
      guard self.goodCost == object.goodCost else { return false }
      guard self.limitedCost == object.limitedCost else { return false }
      guard self.poorCost == object.poorCost else { return false }
      return true
    }

    public static func == (lhs: EvenCostPerCompletedApplicationByCreditRatingPayoutClause, rhs: EvenCostPerCompletedApplicationByCreditRatingPayoutClause) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
