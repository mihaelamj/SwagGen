//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenSubAccountCriteria: BirchModel, Decodable, AutoEquatable {

    /** List of Ids of the parent Accounts */
    public var accountId: [Int]?

    /** List of Uuids for companies */
    public var companyUuid: [ID]?

    /** Creation time of sub account */
    public var createdAt: DateTime?

    /** List of names of sub accounts (external only) */
    public var displayName: [String]?

    /** Exclude deleted sub accounts */
    public var excludeDeleted: Bool?

    /** List of Ids that associated with sub accounts */
    public var id: [Int]?

    public var limit: Int?

    /** List of internal names of sub accounts */
    public var name: [String]?

    /** At what offset you want to look at sub account results */
    public var offset: Int?

    /** Sorting criteria, default is Name */
    public var sortBy: String?

    /** List of unique identifers of sub accounts */
    public var uuid: [ID]?

    public init(accountId: [Int]? = nil, companyUuid: [ID]? = nil, createdAt: DateTime? = nil, displayName: [String]? = nil, excludeDeleted: Bool? = nil, id: [Int]? = nil, limit: Int? = nil, name: [String]? = nil, offset: Int? = nil, sortBy: String? = nil, uuid: [ID]? = nil) {
        self.accountId = accountId
        self.companyUuid = companyUuid
        self.createdAt = createdAt
        self.displayName = displayName
        self.excludeDeleted = excludeDeleted
        self.id = id
        self.limit = limit
        self.name = name
        self.offset = offset
        self.sortBy = sortBy
        self.uuid = uuid
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        accountId = try container.decodeArrayIfPresent("accountId")
        companyUuid = try container.decodeArrayIfPresent("companyUuid")
        createdAt = try container.decodeIfPresent("createdAt")
        displayName = try container.decodeArrayIfPresent("displayName")
        excludeDeleted = try container.decodeIfPresent("excludeDeleted")
        id = try container.decodeArrayIfPresent("id")
        limit = try container.decodeIfPresent("limit")
        name = try container.decodeArrayIfPresent("name")
        offset = try container.decodeIfPresent("offset")
        sortBy = try container.decodeIfPresent("sortBy")
        uuid = try container.decodeArrayIfPresent("uuid")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(accountId, forKey: "accountId")
        try container.encodeIfPresent(companyUuid, forKey: "companyUuid")
        try container.encodeIfPresent(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(excludeDeleted, forKey: "excludeDeleted")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(limit, forKey: "limit")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(offset, forKey: "offset")
        try container.encodeIfPresent(sortBy, forKey: "sortBy")
        try container.encodeIfPresent(uuid, forKey: "uuid")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenSubAccountCriteria else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.companyUuid == object.companyUuid else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.excludeDeleted == object.excludeDeleted else { return false }
      guard self.id == object.id else { return false }
      guard self.limit == object.limit else { return false }
      guard self.name == object.name else { return false }
      guard self.offset == object.offset else { return false }
      guard self.sortBy == object.sortBy else { return false }
      guard self.uuid == object.uuid else { return false }
      return true
    }

    public static func == (lhs: EvenSubAccountCriteria, rhs: EvenSubAccountCriteria) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
