//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenDemandDataImport: BirchModel, Decodable, AutoEquatable {

    /** A unique, internal identifier for this resource.
 */
    public var id: Int

    /** A unique identifer for the file that is being imported
 */
    public var fileId: Int

    /** A unique identifier for the configuration details to be used on file import
 */
    public var configurationId: Int

    /** When the resource was created.
 */
    public var createdAt: DateTime

    /** The UUID of the access token that was used to create this resource.
 */
    public var createdByUuid: ID

    /** When the resource was deleted.
 */
    public var deletedAt: DateTime?

    /** The UUID of the access token that was used to delete this resource.
 */
    public var deletedByUuid: ID?

    public init(id: Int, fileId: Int, configurationId: Int, createdAt: DateTime, createdByUuid: ID, deletedAt: DateTime? = nil, deletedByUuid: ID? = nil) {
        self.id = id
        self.fileId = fileId
        self.configurationId = configurationId
        self.createdAt = createdAt
        self.createdByUuid = createdByUuid
        self.deletedAt = deletedAt
        self.deletedByUuid = deletedByUuid
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        fileId = try container.decode("fileId")
        configurationId = try container.decode("configurationId")
        createdAt = try container.decode("createdAt")
        createdByUuid = try container.decode("createdByUuid")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedByUuid = try container.decodeIfPresent("deletedByUuid")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(fileId, forKey: "fileId")
        try container.encode(configurationId, forKey: "configurationId")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdByUuid, forKey: "createdByUuid")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedByUuid, forKey: "deletedByUuid")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenDemandDataImport else { return false }
      guard self.id == object.id else { return false }
      guard self.fileId == object.fileId else { return false }
      guard self.configurationId == object.configurationId else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdByUuid == object.createdByUuid else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedByUuid == object.deletedByUuid else { return false }
      return true
    }

    public static func == (lhs: EvenDemandDataImport, rhs: EvenDemandDataImport) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
