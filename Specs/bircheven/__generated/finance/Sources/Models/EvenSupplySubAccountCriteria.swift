//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenSupplySubAccountCriteria: BirchModel, Decodable, AutoEquatable {

    /** List of Uuids pertaining to a Supply Partner Manager */
    public var subAccountOwnerSupplyPartnerManager: [ID]?

    /** List of Uuids pertaining to a Supply Yield Manager */
    public var subAccountOwnerSupplyYieldManager: [ID]?

    public init(subAccountOwnerSupplyPartnerManager: [ID]? = nil, subAccountOwnerSupplyYieldManager: [ID]? = nil) {
        self.subAccountOwnerSupplyPartnerManager = subAccountOwnerSupplyPartnerManager
        self.subAccountOwnerSupplyYieldManager = subAccountOwnerSupplyYieldManager
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        subAccountOwnerSupplyPartnerManager = try container.decodeArrayIfPresent("subAccountOwnerSupplyPartnerManager")
        subAccountOwnerSupplyYieldManager = try container.decodeArrayIfPresent("subAccountOwnerSupplyYieldManager")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(subAccountOwnerSupplyPartnerManager, forKey: "subAccountOwnerSupplyPartnerManager")
        try container.encodeIfPresent(subAccountOwnerSupplyYieldManager, forKey: "subAccountOwnerSupplyYieldManager")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenSupplySubAccountCriteria else { return false }
      guard self.subAccountOwnerSupplyPartnerManager == object.subAccountOwnerSupplyPartnerManager else { return false }
      guard self.subAccountOwnerSupplyYieldManager == object.subAccountOwnerSupplyYieldManager else { return false }
      return true
    }

    public static func == (lhs: EvenSupplySubAccountCriteria, rhs: EvenSupplySubAccountCriteria) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
