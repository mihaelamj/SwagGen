//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenBillingCycle: BirchModel, Decodable, AutoEquatable {

    public enum EvenLedgerItemType: String, Codable, Equatable, CaseIterable {
        case payable = "payable"
        case receivable = "receivable"
        case unknown = "unknown"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenLedgerItemType(rawValue: rawValue) ?? .undecodable
        }
    }

    public enum EvenTermUnit: String, Codable, Equatable, CaseIterable {
        case week = "week"
        case biMonthly = "bi_monthly"
        case month = "month"
        case unkown = "unkown"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenTermUnit(rawValue: rawValue) ?? .undecodable
        }
    }

    public var id: Int

    public var accountId: Int

    public var ledgerItemType: EvenLedgerItemType

    public var effectiveAt: DateDay

    public var termUnit: EvenTermUnit

    public var netD: Double

    public var createdAt: DateTime

    public var createdBy: ID

    public var deletedAt: DateTime?

    public var deletedBy: ID?

    public var endDate: DateDay?

    public init(id: Int, accountId: Int, ledgerItemType: EvenLedgerItemType, effectiveAt: DateDay, termUnit: EvenTermUnit, netD: Double, createdAt: DateTime, createdBy: ID, deletedAt: DateTime? = nil, deletedBy: ID? = nil, endDate: DateDay? = nil) {
        self.id = id
        self.accountId = accountId
        self.ledgerItemType = ledgerItemType
        self.effectiveAt = effectiveAt
        self.termUnit = termUnit
        self.netD = netD
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.deletedAt = deletedAt
        self.deletedBy = deletedBy
        self.endDate = endDate
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        accountId = try container.decode("accountId")
        ledgerItemType = try container.decode("ledgerItemType")
        effectiveAt = try container.decode("effectiveAt")
        termUnit = try container.decode("termUnit")
        netD = try container.decode("netD")
        createdAt = try container.decode("createdAt")
        createdBy = try container.decode("createdBy")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedBy = try container.decodeIfPresent("deletedBy")
        endDate = try container.decodeIfPresent("endDate")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(accountId, forKey: "accountId")
        try container.encode(ledgerItemType, forKey: "ledgerItemType")
        try container.encode(effectiveAt, forKey: "effectiveAt")
        try container.encode(termUnit, forKey: "termUnit")
        try container.encode(netD, forKey: "netD")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedBy, forKey: "deletedBy")
        try container.encodeIfPresent(endDate, forKey: "endDate")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenBillingCycle else { return false }
      guard self.id == object.id else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.ledgerItemType == object.ledgerItemType else { return false }
      guard self.effectiveAt == object.effectiveAt else { return false }
      guard self.termUnit == object.termUnit else { return false }
      guard self.netD == object.netD else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedBy == object.deletedBy else { return false }
      guard self.endDate == object.endDate else { return false }
      return true
    }

    public static func == (lhs: EvenBillingCycle, rhs: EvenBillingCycle) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
