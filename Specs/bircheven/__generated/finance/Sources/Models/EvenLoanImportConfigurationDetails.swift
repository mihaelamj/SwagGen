//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenLoanImportConfigurationDetails: BirchModel, Decodable, AutoEquatable {

    public var appliedAmountProcessor: EvenAppliedTimestampProcessor

    public var appliedTimestampProcessor: EvenAppliedTimestampProcessor

    public var approvedAmountProcessor: EvenAppliedTimestampProcessor

    public var approvedTimestampProcessor: EvenAppliedTimestampProcessor

    public var rejectedAmountProcessor: EvenAppliedTimestampProcessor

    public var rejectedTimestampProcessor: EvenAppliedTimestampProcessor

    public var listedAmountProcessor: EvenAppliedTimestampProcessor

    public var listedTimestampProcessor: EvenAppliedTimestampProcessor

    public var fundedAmountProcessor: EvenAppliedTimestampProcessor

    public var fundedTimestampProcessor: EvenAppliedTimestampProcessor

    public var originationFeeProcessor: EvenAppliedTimestampProcessor

    public var approvedLoanTermProcessor: EvenAppliedTimestampProcessor

    public var approvedLoanAprProcessor: EvenAppliedTimestampProcessor

    public var approvedLoanMinimum36MonthAprProcessor: EvenAppliedTimestampProcessor

    public var approvedLoanMinimum60MonthAprProcessor: EvenAppliedTimestampProcessor

    public var listedLoanTermProcessor: EvenAppliedTimestampProcessor

    public var listedLoanAprProcessor: EvenAppliedTimestampProcessor

    public var fundedLoanTermProcessor: EvenAppliedTimestampProcessor

    public var fundedLoanAprProcessor: EvenAppliedTimestampProcessor

    public var isCoApplicantProcessor: EvenAppliedTimestampProcessor?

    public init(appliedAmountProcessor: EvenAppliedTimestampProcessor, appliedTimestampProcessor: EvenAppliedTimestampProcessor, approvedAmountProcessor: EvenAppliedTimestampProcessor, approvedTimestampProcessor: EvenAppliedTimestampProcessor, rejectedAmountProcessor: EvenAppliedTimestampProcessor, rejectedTimestampProcessor: EvenAppliedTimestampProcessor, listedAmountProcessor: EvenAppliedTimestampProcessor, listedTimestampProcessor: EvenAppliedTimestampProcessor, fundedAmountProcessor: EvenAppliedTimestampProcessor, fundedTimestampProcessor: EvenAppliedTimestampProcessor, originationFeeProcessor: EvenAppliedTimestampProcessor, approvedLoanTermProcessor: EvenAppliedTimestampProcessor, approvedLoanAprProcessor: EvenAppliedTimestampProcessor, approvedLoanMinimum36MonthAprProcessor: EvenAppliedTimestampProcessor, approvedLoanMinimum60MonthAprProcessor: EvenAppliedTimestampProcessor, listedLoanTermProcessor: EvenAppliedTimestampProcessor, listedLoanAprProcessor: EvenAppliedTimestampProcessor, fundedLoanTermProcessor: EvenAppliedTimestampProcessor, fundedLoanAprProcessor: EvenAppliedTimestampProcessor, isCoApplicantProcessor: EvenAppliedTimestampProcessor? = nil) {
        self.appliedAmountProcessor = appliedAmountProcessor
        self.appliedTimestampProcessor = appliedTimestampProcessor
        self.approvedAmountProcessor = approvedAmountProcessor
        self.approvedTimestampProcessor = approvedTimestampProcessor
        self.rejectedAmountProcessor = rejectedAmountProcessor
        self.rejectedTimestampProcessor = rejectedTimestampProcessor
        self.listedAmountProcessor = listedAmountProcessor
        self.listedTimestampProcessor = listedTimestampProcessor
        self.fundedAmountProcessor = fundedAmountProcessor
        self.fundedTimestampProcessor = fundedTimestampProcessor
        self.originationFeeProcessor = originationFeeProcessor
        self.approvedLoanTermProcessor = approvedLoanTermProcessor
        self.approvedLoanAprProcessor = approvedLoanAprProcessor
        self.approvedLoanMinimum36MonthAprProcessor = approvedLoanMinimum36MonthAprProcessor
        self.approvedLoanMinimum60MonthAprProcessor = approvedLoanMinimum60MonthAprProcessor
        self.listedLoanTermProcessor = listedLoanTermProcessor
        self.listedLoanAprProcessor = listedLoanAprProcessor
        self.fundedLoanTermProcessor = fundedLoanTermProcessor
        self.fundedLoanAprProcessor = fundedLoanAprProcessor
        self.isCoApplicantProcessor = isCoApplicantProcessor
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        appliedAmountProcessor = try container.decode("appliedAmountProcessor")
        appliedTimestampProcessor = try container.decode("appliedTimestampProcessor")
        approvedAmountProcessor = try container.decode("approvedAmountProcessor")
        approvedTimestampProcessor = try container.decode("approvedTimestampProcessor")
        rejectedAmountProcessor = try container.decode("rejectedAmountProcessor")
        rejectedTimestampProcessor = try container.decode("rejectedTimestampProcessor")
        listedAmountProcessor = try container.decode("listedAmountProcessor")
        listedTimestampProcessor = try container.decode("listedTimestampProcessor")
        fundedAmountProcessor = try container.decode("fundedAmountProcessor")
        fundedTimestampProcessor = try container.decode("fundedTimestampProcessor")
        originationFeeProcessor = try container.decode("originationFeeProcessor")
        approvedLoanTermProcessor = try container.decode("approvedLoanTermProcessor")
        approvedLoanAprProcessor = try container.decode("approvedLoanAprProcessor")
        approvedLoanMinimum36MonthAprProcessor = try container.decode("approvedLoanMinimum36MonthAprProcessor")
        approvedLoanMinimum60MonthAprProcessor = try container.decode("approvedLoanMinimum60MonthAprProcessor")
        listedLoanTermProcessor = try container.decode("listedLoanTermProcessor")
        listedLoanAprProcessor = try container.decode("listedLoanAprProcessor")
        fundedLoanTermProcessor = try container.decode("fundedLoanTermProcessor")
        fundedLoanAprProcessor = try container.decode("fundedLoanAprProcessor")
        isCoApplicantProcessor = try container.decodeIfPresent("isCoApplicantProcessor")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(appliedAmountProcessor, forKey: "appliedAmountProcessor")
        try container.encode(appliedTimestampProcessor, forKey: "appliedTimestampProcessor")
        try container.encode(approvedAmountProcessor, forKey: "approvedAmountProcessor")
        try container.encode(approvedTimestampProcessor, forKey: "approvedTimestampProcessor")
        try container.encode(rejectedAmountProcessor, forKey: "rejectedAmountProcessor")
        try container.encode(rejectedTimestampProcessor, forKey: "rejectedTimestampProcessor")
        try container.encode(listedAmountProcessor, forKey: "listedAmountProcessor")
        try container.encode(listedTimestampProcessor, forKey: "listedTimestampProcessor")
        try container.encode(fundedAmountProcessor, forKey: "fundedAmountProcessor")
        try container.encode(fundedTimestampProcessor, forKey: "fundedTimestampProcessor")
        try container.encode(originationFeeProcessor, forKey: "originationFeeProcessor")
        try container.encode(approvedLoanTermProcessor, forKey: "approvedLoanTermProcessor")
        try container.encode(approvedLoanAprProcessor, forKey: "approvedLoanAprProcessor")
        try container.encode(approvedLoanMinimum36MonthAprProcessor, forKey: "approvedLoanMinimum36MonthAprProcessor")
        try container.encode(approvedLoanMinimum60MonthAprProcessor, forKey: "approvedLoanMinimum60MonthAprProcessor")
        try container.encode(listedLoanTermProcessor, forKey: "listedLoanTermProcessor")
        try container.encode(listedLoanAprProcessor, forKey: "listedLoanAprProcessor")
        try container.encode(fundedLoanTermProcessor, forKey: "fundedLoanTermProcessor")
        try container.encode(fundedLoanAprProcessor, forKey: "fundedLoanAprProcessor")
        try container.encodeIfPresent(isCoApplicantProcessor, forKey: "isCoApplicantProcessor")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenLoanImportConfigurationDetails else { return false }
      guard self.appliedAmountProcessor == object.appliedAmountProcessor else { return false }
      guard self.appliedTimestampProcessor == object.appliedTimestampProcessor else { return false }
      guard self.approvedAmountProcessor == object.approvedAmountProcessor else { return false }
      guard self.approvedTimestampProcessor == object.approvedTimestampProcessor else { return false }
      guard self.rejectedAmountProcessor == object.rejectedAmountProcessor else { return false }
      guard self.rejectedTimestampProcessor == object.rejectedTimestampProcessor else { return false }
      guard self.listedAmountProcessor == object.listedAmountProcessor else { return false }
      guard self.listedTimestampProcessor == object.listedTimestampProcessor else { return false }
      guard self.fundedAmountProcessor == object.fundedAmountProcessor else { return false }
      guard self.fundedTimestampProcessor == object.fundedTimestampProcessor else { return false }
      guard self.originationFeeProcessor == object.originationFeeProcessor else { return false }
      guard self.approvedLoanTermProcessor == object.approvedLoanTermProcessor else { return false }
      guard self.approvedLoanAprProcessor == object.approvedLoanAprProcessor else { return false }
      guard self.approvedLoanMinimum36MonthAprProcessor == object.approvedLoanMinimum36MonthAprProcessor else { return false }
      guard self.approvedLoanMinimum60MonthAprProcessor == object.approvedLoanMinimum60MonthAprProcessor else { return false }
      guard self.listedLoanTermProcessor == object.listedLoanTermProcessor else { return false }
      guard self.listedLoanAprProcessor == object.listedLoanAprProcessor else { return false }
      guard self.fundedLoanTermProcessor == object.fundedLoanTermProcessor else { return false }
      guard self.fundedLoanAprProcessor == object.fundedLoanAprProcessor else { return false }
      guard self.isCoApplicantProcessor == object.isCoApplicantProcessor else { return false }
      return true
    }

    public static func == (lhs: EvenLoanImportConfigurationDetails, rhs: EvenLoanImportConfigurationDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
