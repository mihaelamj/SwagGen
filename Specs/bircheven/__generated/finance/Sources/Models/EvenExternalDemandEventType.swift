//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public enum EvenExternalDemandEventType: String, Codable, Equatable, CaseIterable {
    case creditCardapplied = "credit_card/applied"
    case creditCardapproved = "credit_card/approved"
    case creditCardfunded = "credit_card/funded"
    case creditCardissuerPreQualificationApplication = "credit_card/issuer_pre_qualification_application"
    case creditCardissuerPreQualificationApplicationApproval = "credit_card/issuer_pre_qualification_application_approval"
    case creditCardopened = "credit_card/opened"
    case creditCardrejected = "credit_card/rejected"
    case lifeInsuranceapplied = "life_insurance/applied"
    case lifeInsuranceapproved = "life_insurance/approved"
    case lifeInsurancecarrierAdjustment = "life_insurance/carrier_adjustment"
    case lifeInsurancecarrierPayment = "life_insurance/carrier_payment"
    case lifeInsurancepolicyAdjustment = "life_insurance/policy_adjustment"
    case lifeInsurancepolicyBonusPayment = "life_insurance/policy_bonus_payment"
    case lifeInsurancepolicyChargeBack = "life_insurance/policy_charge_back"
    case lifeInsurancepolicyInForce = "life_insurance/policy_in_force"
    case lifeInsurancepolicyPayment = "life_insurance/policy_payment"
    case loanapplied = "loan/applied"
    case loanapproved = "loan/approved"
    case loanfunded = "loan/funded"
    case loanlisted = "loan/listed"
    case loanlistingNotFunded = "loan/listing_not_funded"
    case loanrejected = "loan/rejected"
    case mortgageapplied = "mortgage/applied"
    case mortgageapproved = "mortgage/approved"
    case mortgagefunded = "mortgage/funded"
    case mortgagerejected = "mortgage/rejected"
    case savingsapplied = "savings/applied"
    case savingsfunded = "savings/funded"
    case savingsmobileApplicationInstalled = "savings/mobile_application_installed"
    case savingsmobileApplicationBankLinked = "savings/mobile_application_bank_linked"
    case savingsofferClicked = "savings/offer_clicked"
    case savingsopened = "savings/opened"
    case undecodable

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(String.self)
        self = EvenExternalDemandEventType(rawValue: rawValue) ?? .undecodable
    }
}
