//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenDemandDataImportSummary: BirchModel, Decodable, AutoEquatable {

    public enum EvenSource: String, Codable, Equatable, CaseIterable {
        case manualUpload = "manualUpload"
        case sftp = "sftp"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenSource(rawValue: rawValue) ?? .undecodable
        }
    }

    public enum EvenStatus: String, Codable, Equatable, CaseIterable {
        case started = "started"
        case completed = "completed"
        case failed = "failed"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenStatus(rawValue: rawValue) ?? .undecodable
        }
    }

    /** A unique, internal identifier for this resource.
 */
    public var id: Int

    public var subAccountId: Int

    public var subAccountName: String

    /** A unique identifer for the file that is being imported
 */
    public var fileId: Int

    public var fileUrl: String

    public var productType: EvenProductType

    public var source: EvenSource

    public var status: EvenStatus

    public var newEventCount: Int

    public var duplicateEventCount: Int

    public var errorCount: Int

    /** When the demand data import was created.
 */
    public var createdAt: DateTime

    /** The UUID of the access token that was used to create this demand data import.
 */
    public var createdByUuid: ID

    /** When the demand data import was deleted.
 */
    public var deletedAt: DateTime?

    /** The UUID of the access token that was used to delete this demand data import.
 */
    public var deletedByUuid: ID?

    public init(id: Int, subAccountId: Int, subAccountName: String, fileId: Int, fileUrl: String, productType: EvenProductType, source: EvenSource, status: EvenStatus, newEventCount: Int, duplicateEventCount: Int, errorCount: Int, createdAt: DateTime, createdByUuid: ID, deletedAt: DateTime? = nil, deletedByUuid: ID? = nil) {
        self.id = id
        self.subAccountId = subAccountId
        self.subAccountName = subAccountName
        self.fileId = fileId
        self.fileUrl = fileUrl
        self.productType = productType
        self.source = source
        self.status = status
        self.newEventCount = newEventCount
        self.duplicateEventCount = duplicateEventCount
        self.errorCount = errorCount
        self.createdAt = createdAt
        self.createdByUuid = createdByUuid
        self.deletedAt = deletedAt
        self.deletedByUuid = deletedByUuid
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        subAccountId = try container.decode("subAccountId")
        subAccountName = try container.decode("subAccountName")
        fileId = try container.decode("fileId")
        fileUrl = try container.decode("fileUrl")
        productType = try container.decode("productType")
        source = try container.decode("source")
        status = try container.decode("status")
        newEventCount = try container.decode("newEventCount")
        duplicateEventCount = try container.decode("duplicateEventCount")
        errorCount = try container.decode("errorCount")
        createdAt = try container.decode("createdAt")
        createdByUuid = try container.decode("createdByUuid")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedByUuid = try container.decodeIfPresent("deletedByUuid")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(subAccountId, forKey: "subAccountId")
        try container.encode(subAccountName, forKey: "subAccountName")
        try container.encode(fileId, forKey: "fileId")
        try container.encode(fileUrl, forKey: "fileUrl")
        try container.encode(productType, forKey: "productType")
        try container.encode(source, forKey: "source")
        try container.encode(status, forKey: "status")
        try container.encode(newEventCount, forKey: "newEventCount")
        try container.encode(duplicateEventCount, forKey: "duplicateEventCount")
        try container.encode(errorCount, forKey: "errorCount")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdByUuid, forKey: "createdByUuid")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedByUuid, forKey: "deletedByUuid")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenDemandDataImportSummary else { return false }
      guard self.id == object.id else { return false }
      guard self.subAccountId == object.subAccountId else { return false }
      guard self.subAccountName == object.subAccountName else { return false }
      guard self.fileId == object.fileId else { return false }
      guard self.fileUrl == object.fileUrl else { return false }
      guard self.productType == object.productType else { return false }
      guard self.source == object.source else { return false }
      guard self.status == object.status else { return false }
      guard self.newEventCount == object.newEventCount else { return false }
      guard self.duplicateEventCount == object.duplicateEventCount else { return false }
      guard self.errorCount == object.errorCount else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdByUuid == object.createdByUuid else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedByUuid == object.deletedByUuid else { return false }
      return true
    }

    public static func == (lhs: EvenDemandDataImportSummary, rhs: EvenDemandDataImportSummary) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
