//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.AccountAdjustment {

    /**
    Get account adjustments

    Returns a list of account adjustments that match the specified criteria
    */
    public enum GetAccountAdjustments {

        public static let service = APIService<Response>(id: "getAccountAdjustments", tag: "Account Adjustment", method: "GET", path: "/accountAdjustments", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** A comma separated list of adjustment ids */
                public var id: [Int]?

                /** A comma separated list of Account ids */
                public var accountId: [Int]?

                /** A comma separated list of Ledger Item ids */
                public var ledgerItemIds: [Int]?

                /** Reason for account adjustment based on a defined enum */
                public var adjustmentReason: [EvenAdjustmentReason]?

                /** Fuzzy search parameter */
                public var q: [String]?

                /** beginning of the createdAt range */
                public var createdAtStart: DateTime?

                /** end of the createdAt range */
                public var createdAtEnd: DateTime?

                /** comma separated list of uuids */
                public var createdByUuids: [ID]?

                /** beginning of range for deletedAt */
                public var deletedAtStart: DateTime?

                /** end of range for deletedAt */
                public var deletedAtEnd: DateTime?

                /** comma separated list of uuids */
                public var deletedByUuids: [ID]?

                /** limit the results, default 100 */
                public var limit: Int

                /** at what offset do you want to start looking at, default 0 */
                public var offset: Int?

                /** how do you want to sort, default created_at */
                public var sortBy: String?

                public var order: EvenOrder?

                /** ignored deleted items, default true */
                public var excludeDeleted: Bool?

                public init(id: [Int]? = nil, accountId: [Int]? = nil, ledgerItemIds: [Int]? = nil, adjustmentReason: [EvenAdjustmentReason]? = nil, q: [String]? = nil, createdAtStart: DateTime? = nil, createdAtEnd: DateTime? = nil, createdByUuids: [ID]? = nil, deletedAtStart: DateTime? = nil, deletedAtEnd: DateTime? = nil, deletedByUuids: [ID]? = nil, limit: Int, offset: Int? = nil, sortBy: String? = nil, order: EvenOrder? = nil, excludeDeleted: Bool? = nil) {
                    self.id = id
                    self.accountId = accountId
                    self.ledgerItemIds = ledgerItemIds
                    self.adjustmentReason = adjustmentReason
                    self.q = q
                    self.createdAtStart = createdAtStart
                    self.createdAtEnd = createdAtEnd
                    self.createdByUuids = createdByUuids
                    self.deletedAtStart = deletedAtStart
                    self.deletedAtEnd = deletedAtEnd
                    self.deletedByUuids = deletedByUuids
                    self.limit = limit
                    self.offset = offset
                    self.sortBy = sortBy
                    self.order = order
                    self.excludeDeleted = excludeDeleted
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetAccountAdjustments.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: [Int]? = nil, accountId: [Int]? = nil, ledgerItemIds: [Int]? = nil, adjustmentReason: [EvenAdjustmentReason]? = nil, q: [String]? = nil, createdAtStart: DateTime? = nil, createdAtEnd: DateTime? = nil, createdByUuids: [ID]? = nil, deletedAtStart: DateTime? = nil, deletedAtEnd: DateTime? = nil, deletedByUuids: [ID]? = nil, limit: Int, offset: Int? = nil, sortBy: String? = nil, order: EvenOrder? = nil, excludeDeleted: Bool? = nil) {
                let options = Options(id: id, accountId: accountId, ledgerItemIds: ledgerItemIds, adjustmentReason: adjustmentReason, q: q, createdAtStart: createdAtStart, createdAtEnd: createdAtEnd, createdByUuids: createdByUuids, deletedAtStart: deletedAtStart, deletedAtEnd: deletedAtEnd, deletedByUuids: deletedByUuids, limit: limit, offset: offset, sortBy: sortBy, order: order, excludeDeleted: excludeDeleted)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let id = options.id?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["id"] = id
                }
                if let accountId = options.accountId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountId"] = accountId
                }
                if let ledgerItemIds = options.ledgerItemIds?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["ledgerItemIds"] = ledgerItemIds
                }
                if let adjustmentReason = options.adjustmentReason?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["adjustmentReason"] = adjustmentReason
                }
                if let q = options.q?.joined(separator: ",") {
                  params["q"] = q
                }
                if let createdAtStart = options.createdAtStart?.encode() {
                  params["createdAtStart"] = createdAtStart
                }
                if let createdAtEnd = options.createdAtEnd?.encode() {
                  params["createdAtEnd"] = createdAtEnd
                }
                if let createdByUuids = options.createdByUuids?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["createdByUuids"] = createdByUuids
                }
                if let deletedAtStart = options.deletedAtStart?.encode() {
                  params["deletedAtStart"] = deletedAtStart
                }
                if let deletedAtEnd = options.deletedAtEnd?.encode() {
                  params["deletedAtEnd"] = deletedAtEnd
                }
                if let deletedByUuids = options.deletedByUuids?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["deletedByUuids"] = deletedByUuids
                }
                params["limit"] = options.limit
                if let offset = options.offset {
                  params["offset"] = offset
                }
                if let sortBy = options.sortBy {
                  params["sortBy"] = sortBy
                }
                if let order = options.order?.encode() {
                  params["order"] = order
                }
                if let excludeDeleted = options.excludeDeleted {
                  params["excludeDeleted"] = excludeDeleted
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [EvenAccountAdjustment]

            /** Success */
            case status200([EvenAccountAdjustment])

            /** Invalid request */
            case status400([EvenApiError])

            public var success: [EvenAccountAdjustment]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: [EvenApiError]? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[EvenAccountAdjustment], [EvenApiError]> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenAccountAdjustment].self, from: data))
                case 400: self = try .status400(decoder.decode([EvenApiError].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
