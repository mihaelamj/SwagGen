//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.Account {

    /**
    Get accounts

    Return accounts based upon request parameters
    */
    public enum GetAccounts {

        public static let service = APIService<Response>(id: "getAccounts", tag: "Account", method: "GET", path: "/accounts", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var id: [Int]?

                public var uuid: [ID]?

                public var name: [String]?

                public var email: [String]?

                public var address1: [String]?

                public var address2: [String]?

                public var address3: [String]?

                public var city: [String]?

                public var state: [String]?

                public var zipcode: [String]?

                public var country: [String]?

                public var phoneNumber: [String]?

                public var billingName: [String]?

                public var receivableBillingName: [String]?

                public var billingSetup: [String]?

                public var createdAtMin: DateTime?

                public var createdAtMax: DateTime?

                public var createdBy: [ID]?

                public var deletedAtMin: DateTime?

                public var deletedAtMax: DateTime?

                public var isDeleted: Bool?

                public var deletedBy: [ID]?

                /** include deactivated items, default false */
                public var includeDeactivated: Bool?

                /** The number of resources to skip before the first resource in the results.
 */
                public var offset: Int?

                /** The maximum number of resources to include in the results.
 */
                public var limit: Int

                /** The attribute with which to sort the resources.
 */
                public var sortBy: String?

                /** The direction to use for ordering resources.
 */
                public var order: String?

                public init(id: [Int]? = nil, uuid: [ID]? = nil, name: [String]? = nil, email: [String]? = nil, address1: [String]? = nil, address2: [String]? = nil, address3: [String]? = nil, city: [String]? = nil, state: [String]? = nil, zipcode: [String]? = nil, country: [String]? = nil, phoneNumber: [String]? = nil, billingName: [String]? = nil, receivableBillingName: [String]? = nil, billingSetup: [String]? = nil, createdAtMin: DateTime? = nil, createdAtMax: DateTime? = nil, createdBy: [ID]? = nil, deletedAtMin: DateTime? = nil, deletedAtMax: DateTime? = nil, isDeleted: Bool? = nil, deletedBy: [ID]? = nil, includeDeactivated: Bool? = nil, offset: Int? = nil, limit: Int, sortBy: String? = nil, order: String? = nil) {
                    self.id = id
                    self.uuid = uuid
                    self.name = name
                    self.email = email
                    self.address1 = address1
                    self.address2 = address2
                    self.address3 = address3
                    self.city = city
                    self.state = state
                    self.zipcode = zipcode
                    self.country = country
                    self.phoneNumber = phoneNumber
                    self.billingName = billingName
                    self.receivableBillingName = receivableBillingName
                    self.billingSetup = billingSetup
                    self.createdAtMin = createdAtMin
                    self.createdAtMax = createdAtMax
                    self.createdBy = createdBy
                    self.deletedAtMin = deletedAtMin
                    self.deletedAtMax = deletedAtMax
                    self.isDeleted = isDeleted
                    self.deletedBy = deletedBy
                    self.includeDeactivated = includeDeactivated
                    self.offset = offset
                    self.limit = limit
                    self.sortBy = sortBy
                    self.order = order
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetAccounts.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: [Int]? = nil, uuid: [ID]? = nil, name: [String]? = nil, email: [String]? = nil, address1: [String]? = nil, address2: [String]? = nil, address3: [String]? = nil, city: [String]? = nil, state: [String]? = nil, zipcode: [String]? = nil, country: [String]? = nil, phoneNumber: [String]? = nil, billingName: [String]? = nil, receivableBillingName: [String]? = nil, billingSetup: [String]? = nil, createdAtMin: DateTime? = nil, createdAtMax: DateTime? = nil, createdBy: [ID]? = nil, deletedAtMin: DateTime? = nil, deletedAtMax: DateTime? = nil, isDeleted: Bool? = nil, deletedBy: [ID]? = nil, includeDeactivated: Bool? = nil, offset: Int? = nil, limit: Int, sortBy: String? = nil, order: String? = nil) {
                let options = Options(id: id, uuid: uuid, name: name, email: email, address1: address1, address2: address2, address3: address3, city: city, state: state, zipcode: zipcode, country: country, phoneNumber: phoneNumber, billingName: billingName, receivableBillingName: receivableBillingName, billingSetup: billingSetup, createdAtMin: createdAtMin, createdAtMax: createdAtMax, createdBy: createdBy, deletedAtMin: deletedAtMin, deletedAtMax: deletedAtMax, isDeleted: isDeleted, deletedBy: deletedBy, includeDeactivated: includeDeactivated, offset: offset, limit: limit, sortBy: sortBy, order: order)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let id = options.id?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["id"] = id
                }
                if let uuid = options.uuid?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["uuid"] = uuid
                }
                if let name = options.name?.joined(separator: ",") {
                  params["name"] = name
                }
                if let email = options.email?.joined(separator: ",") {
                  params["email"] = email
                }
                if let address1 = options.address1?.joined(separator: ",") {
                  params["address1"] = address1
                }
                if let address2 = options.address2?.joined(separator: ",") {
                  params["address2"] = address2
                }
                if let address3 = options.address3?.joined(separator: ",") {
                  params["address3"] = address3
                }
                if let city = options.city?.joined(separator: ",") {
                  params["city"] = city
                }
                if let state = options.state?.joined(separator: ",") {
                  params["state"] = state
                }
                if let zipcode = options.zipcode?.joined(separator: ",") {
                  params["zipcode"] = zipcode
                }
                if let country = options.country?.joined(separator: ",") {
                  params["country"] = country
                }
                if let phoneNumber = options.phoneNumber?.joined(separator: ",") {
                  params["phoneNumber"] = phoneNumber
                }
                if let billingName = options.billingName?.joined(separator: ",") {
                  params["billingName"] = billingName
                }
                if let receivableBillingName = options.receivableBillingName?.joined(separator: ",") {
                  params["receivableBillingName"] = receivableBillingName
                }
                if let billingSetup = options.billingSetup?.joined(separator: ",") {
                  params["billingSetup"] = billingSetup
                }
                if let createdAtMin = options.createdAtMin?.encode() {
                  params["createdAtMin"] = createdAtMin
                }
                if let createdAtMax = options.createdAtMax?.encode() {
                  params["createdAtMax"] = createdAtMax
                }
                if let createdBy = options.createdBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["createdBy"] = createdBy
                }
                if let deletedAtMin = options.deletedAtMin?.encode() {
                  params["deletedAtMin"] = deletedAtMin
                }
                if let deletedAtMax = options.deletedAtMax?.encode() {
                  params["deletedAtMax"] = deletedAtMax
                }
                if let isDeleted = options.isDeleted {
                  params["isDeleted"] = isDeleted
                }
                if let deletedBy = options.deletedBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["deletedBy"] = deletedBy
                }
                if let includeDeactivated = options.includeDeactivated {
                  params["includeDeactivated"] = includeDeactivated
                }
                if let offset = options.offset {
                  params["offset"] = offset
                }
                params["limit"] = options.limit
                if let sortBy = options.sortBy {
                  params["sortBy"] = sortBy
                }
                if let order = options.order {
                  params["order"] = order
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [EvenAccount]

            /** Success */
            case status200([EvenAccount])

            /** Invalid request */
            case status400([EvenApiError])

            public var success: [EvenAccount]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: [EvenApiError]? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[EvenAccount], [EvenApiError]> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenAccount].self, from: data))
                case 400: self = try .status400(decoder.decode([EvenApiError].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
