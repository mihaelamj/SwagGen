//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.Account {

    /**
    Get account owners

    Return a list of account owners based on request parameters
    */
    public enum GetAccountOwners {

        public static let service = APIService<Response>(id: "getAccountOwners", tag: "Account", method: "GET", path: "/accounts/owners", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var accountOwnerId: [Int]?

                public var accountOwnerAccountId: [Int]?

                public var accountOwnerSupplyPartnerManager: [ID]?

                public var accountOwnerDemandPartnerManager: [ID]?

                public var accountOwnerSupplyYieldManager: [ID]?

                public var accountOwnerDemandYieldManager: [ID]?

                public var accountOwnerCreatedAtMin: DateTime?

                public var accountOwnerCreatedAtMax: DateTime?

                public var accountOwnerCreatedBy: [ID]?

                public var accountOwnerDeletedAtMin: DateTime?

                public var accountOwnerDeletedAtMax: DateTime?

                public var accountOwnerIsDeleted: Bool?

                public var accountOwnerDeletedBy: [ID]?

                public init(accountOwnerId: [Int]? = nil, accountOwnerAccountId: [Int]? = nil, accountOwnerSupplyPartnerManager: [ID]? = nil, accountOwnerDemandPartnerManager: [ID]? = nil, accountOwnerSupplyYieldManager: [ID]? = nil, accountOwnerDemandYieldManager: [ID]? = nil, accountOwnerCreatedAtMin: DateTime? = nil, accountOwnerCreatedAtMax: DateTime? = nil, accountOwnerCreatedBy: [ID]? = nil, accountOwnerDeletedAtMin: DateTime? = nil, accountOwnerDeletedAtMax: DateTime? = nil, accountOwnerIsDeleted: Bool? = nil, accountOwnerDeletedBy: [ID]? = nil) {
                    self.accountOwnerId = accountOwnerId
                    self.accountOwnerAccountId = accountOwnerAccountId
                    self.accountOwnerSupplyPartnerManager = accountOwnerSupplyPartnerManager
                    self.accountOwnerDemandPartnerManager = accountOwnerDemandPartnerManager
                    self.accountOwnerSupplyYieldManager = accountOwnerSupplyYieldManager
                    self.accountOwnerDemandYieldManager = accountOwnerDemandYieldManager
                    self.accountOwnerCreatedAtMin = accountOwnerCreatedAtMin
                    self.accountOwnerCreatedAtMax = accountOwnerCreatedAtMax
                    self.accountOwnerCreatedBy = accountOwnerCreatedBy
                    self.accountOwnerDeletedAtMin = accountOwnerDeletedAtMin
                    self.accountOwnerDeletedAtMax = accountOwnerDeletedAtMax
                    self.accountOwnerIsDeleted = accountOwnerIsDeleted
                    self.accountOwnerDeletedBy = accountOwnerDeletedBy
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetAccountOwners.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(accountOwnerId: [Int]? = nil, accountOwnerAccountId: [Int]? = nil, accountOwnerSupplyPartnerManager: [ID]? = nil, accountOwnerDemandPartnerManager: [ID]? = nil, accountOwnerSupplyYieldManager: [ID]? = nil, accountOwnerDemandYieldManager: [ID]? = nil, accountOwnerCreatedAtMin: DateTime? = nil, accountOwnerCreatedAtMax: DateTime? = nil, accountOwnerCreatedBy: [ID]? = nil, accountOwnerDeletedAtMin: DateTime? = nil, accountOwnerDeletedAtMax: DateTime? = nil, accountOwnerIsDeleted: Bool? = nil, accountOwnerDeletedBy: [ID]? = nil) {
                let options = Options(accountOwnerId: accountOwnerId, accountOwnerAccountId: accountOwnerAccountId, accountOwnerSupplyPartnerManager: accountOwnerSupplyPartnerManager, accountOwnerDemandPartnerManager: accountOwnerDemandPartnerManager, accountOwnerSupplyYieldManager: accountOwnerSupplyYieldManager, accountOwnerDemandYieldManager: accountOwnerDemandYieldManager, accountOwnerCreatedAtMin: accountOwnerCreatedAtMin, accountOwnerCreatedAtMax: accountOwnerCreatedAtMax, accountOwnerCreatedBy: accountOwnerCreatedBy, accountOwnerDeletedAtMin: accountOwnerDeletedAtMin, accountOwnerDeletedAtMax: accountOwnerDeletedAtMax, accountOwnerIsDeleted: accountOwnerIsDeleted, accountOwnerDeletedBy: accountOwnerDeletedBy)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let accountOwnerId = options.accountOwnerId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountOwnerId"] = accountOwnerId
                }
                if let accountOwnerAccountId = options.accountOwnerAccountId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountOwnerAccountId"] = accountOwnerAccountId
                }
                if let accountOwnerSupplyPartnerManager = options.accountOwnerSupplyPartnerManager?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountOwnerSupplyPartnerManager"] = accountOwnerSupplyPartnerManager
                }
                if let accountOwnerDemandPartnerManager = options.accountOwnerDemandPartnerManager?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountOwnerDemandPartnerManager"] = accountOwnerDemandPartnerManager
                }
                if let accountOwnerSupplyYieldManager = options.accountOwnerSupplyYieldManager?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountOwnerSupplyYieldManager"] = accountOwnerSupplyYieldManager
                }
                if let accountOwnerDemandYieldManager = options.accountOwnerDemandYieldManager?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountOwnerDemandYieldManager"] = accountOwnerDemandYieldManager
                }
                if let accountOwnerCreatedAtMin = options.accountOwnerCreatedAtMin?.encode() {
                  params["accountOwnerCreatedAtMin"] = accountOwnerCreatedAtMin
                }
                if let accountOwnerCreatedAtMax = options.accountOwnerCreatedAtMax?.encode() {
                  params["accountOwnerCreatedAtMax"] = accountOwnerCreatedAtMax
                }
                if let accountOwnerCreatedBy = options.accountOwnerCreatedBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountOwnerCreatedBy"] = accountOwnerCreatedBy
                }
                if let accountOwnerDeletedAtMin = options.accountOwnerDeletedAtMin?.encode() {
                  params["accountOwnerDeletedAtMin"] = accountOwnerDeletedAtMin
                }
                if let accountOwnerDeletedAtMax = options.accountOwnerDeletedAtMax?.encode() {
                  params["accountOwnerDeletedAtMax"] = accountOwnerDeletedAtMax
                }
                if let accountOwnerIsDeleted = options.accountOwnerIsDeleted {
                  params["accountOwnerIsDeleted"] = accountOwnerIsDeleted
                }
                if let accountOwnerDeletedBy = options.accountOwnerDeletedBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountOwnerDeletedBy"] = accountOwnerDeletedBy
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [EvenAccountOwner]

            /** Success */
            case status200([EvenAccountOwner])

            /** Invalid request */
            case status400([EvenApiError])

            public var success: [EvenAccountOwner]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: [EvenApiError]? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[EvenAccountOwner], [EvenApiError]> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenAccountOwner].self, from: data))
                case 400: self = try .status400(decoder.decode([EvenApiError].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
