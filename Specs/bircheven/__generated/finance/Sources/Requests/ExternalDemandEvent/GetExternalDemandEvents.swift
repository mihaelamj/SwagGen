//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.ExternalDemandEvent {

    /** Get external demand events */
    public enum GetExternalDemandEvents {

        public static let service = APIService<Response>(id: "getExternalDemandEvents", tag: "External Demand Event", method: "GET", path: "/externalDemandEvents", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** A comma separated list of ids */
                public var id: [Int]?

                public var leadUuid: [ID]?

                public var subAccountId: [Int]?

                public var eventType: [EvenExternalDemandEventType]?

                public var partnerTrackingId: [String]?

                public var createdByUuid: [ID]?

                public var minId: Int?

                public var timestampFrom: DateTime?

                public var timestampTo: DateTime?

                /** ignored deleted items, default true */
                public var excludeDeleted: Bool?

                /** limit results */
                public var limit: Int

                /** at what offset do you want to start looking at, default 0 */
                public var offset: Int?

                /** how do you want to sort, default created_at */
                public var sortBy: String?

                public var order: EvenOrder?

                public init(id: [Int]? = nil, leadUuid: [ID]? = nil, subAccountId: [Int]? = nil, eventType: [EvenExternalDemandEventType]? = nil, partnerTrackingId: [String]? = nil, createdByUuid: [ID]? = nil, minId: Int? = nil, timestampFrom: DateTime? = nil, timestampTo: DateTime? = nil, excludeDeleted: Bool? = nil, limit: Int, offset: Int? = nil, sortBy: String? = nil, order: EvenOrder? = nil) {
                    self.id = id
                    self.leadUuid = leadUuid
                    self.subAccountId = subAccountId
                    self.eventType = eventType
                    self.partnerTrackingId = partnerTrackingId
                    self.createdByUuid = createdByUuid
                    self.minId = minId
                    self.timestampFrom = timestampFrom
                    self.timestampTo = timestampTo
                    self.excludeDeleted = excludeDeleted
                    self.limit = limit
                    self.offset = offset
                    self.sortBy = sortBy
                    self.order = order
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetExternalDemandEvents.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: [Int]? = nil, leadUuid: [ID]? = nil, subAccountId: [Int]? = nil, eventType: [EvenExternalDemandEventType]? = nil, partnerTrackingId: [String]? = nil, createdByUuid: [ID]? = nil, minId: Int? = nil, timestampFrom: DateTime? = nil, timestampTo: DateTime? = nil, excludeDeleted: Bool? = nil, limit: Int, offset: Int? = nil, sortBy: String? = nil, order: EvenOrder? = nil) {
                let options = Options(id: id, leadUuid: leadUuid, subAccountId: subAccountId, eventType: eventType, partnerTrackingId: partnerTrackingId, createdByUuid: createdByUuid, minId: minId, timestampFrom: timestampFrom, timestampTo: timestampTo, excludeDeleted: excludeDeleted, limit: limit, offset: offset, sortBy: sortBy, order: order)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let id = options.id?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["id"] = id
                }
                if let leadUuid = options.leadUuid?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["leadUuid"] = leadUuid
                }
                if let subAccountId = options.subAccountId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountId"] = subAccountId
                }
                if let eventType = options.eventType?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["eventType"] = eventType
                }
                if let partnerTrackingId = options.partnerTrackingId?.joined(separator: ",") {
                  params["partnerTrackingId"] = partnerTrackingId
                }
                if let createdByUuid = options.createdByUuid?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["createdByUuid"] = createdByUuid
                }
                if let minId = options.minId {
                  params["minId"] = minId
                }
                if let timestampFrom = options.timestampFrom?.encode() {
                  params["timestampFrom"] = timestampFrom
                }
                if let timestampTo = options.timestampTo?.encode() {
                  params["timestampTo"] = timestampTo
                }
                if let excludeDeleted = options.excludeDeleted {
                  params["excludeDeleted"] = excludeDeleted
                }
                params["limit"] = options.limit
                if let offset = options.offset {
                  params["offset"] = offset
                }
                if let sortBy = options.sortBy {
                  params["sortBy"] = sortBy
                }
                if let order = options.order?.encode() {
                  params["order"] = order
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [EvenExternalDemandEvent]

            /** Success */
            case status200([EvenExternalDemandEvent])

            /** Invalid request */
            case status400([EvenApiError])

            public var success: [EvenExternalDemandEvent]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: [EvenApiError]? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[EvenExternalDemandEvent], [EvenApiError]> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenExternalDemandEvent].self, from: data))
                case 400: self = try .status400(decoder.decode([EvenApiError].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
