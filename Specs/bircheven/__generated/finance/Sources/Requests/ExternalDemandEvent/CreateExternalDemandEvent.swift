//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.ExternalDemandEvent {

    /** Create external demand event */
    public enum CreateExternalDemandEvent {

        public static let service = APIService<Response>(id: "createExternalDemandEvent", tag: "External Demand Event", method: "POST", path: "/externalDemandEvents", hasBody: true, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:write"])])

        public final class Request: APIRequest<Response> {

            public var body: EvenExternalDemandEventCreateData

            public init(body: EvenExternalDemandEventCreateData, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: CreateExternalDemandEvent.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Create external demand event */
            public class Status400: BirchModel, Decodable, AutoEquatable {

                public var attribute: String?

                public var details: EvenDetails?

                public var message: String?

                public var type: String?

                public init(attribute: String? = nil, details: EvenDetails? = nil, message: String? = nil, type: String? = nil) {
                    self.attribute = attribute
                    self.details = details
                    self.message = message
                    self.type = type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    attribute = try container.decodeIfPresent("attribute")
                    details = try container.decodeIfPresent("details")
                    message = try container.decodeIfPresent("message")
                    type = try container.decodeIfPresent("type")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(attribute, forKey: "attribute")
                    try container.encodeIfPresent(details, forKey: "details")
                    try container.encodeIfPresent(message, forKey: "message")
                    try container.encodeIfPresent(type, forKey: "type")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status400 else { return false }
                  guard self.attribute == object.attribute else { return false }
                  guard self.details == object.details else { return false }
                  guard self.message == object.message else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: Status400, rhs: Status400) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Create external demand event */
            public class Status409: BirchModel, Decodable, AutoEquatable {

                public var attribute: String?

                public var details: EvenDetails?

                public var message: String?

                public var type: String?

                public init(attribute: String? = nil, details: EvenDetails? = nil, message: String? = nil, type: String? = nil) {
                    self.attribute = attribute
                    self.details = details
                    self.message = message
                    self.type = type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    attribute = try container.decodeIfPresent("attribute")
                    details = try container.decodeIfPresent("details")
                    message = try container.decodeIfPresent("message")
                    type = try container.decodeIfPresent("type")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(attribute, forKey: "attribute")
                    try container.encodeIfPresent(details, forKey: "details")
                    try container.encodeIfPresent(message, forKey: "message")
                    try container.encodeIfPresent(type, forKey: "type")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status409 else { return false }
                  guard self.attribute == object.attribute else { return false }
                  guard self.details == object.details else { return false }
                  guard self.message == object.message else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: Status409, rhs: Status409) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = EvenLegacySubAccount

            /** Success */
            case status201(EvenLegacySubAccount)

            /** Invalid request */
            case status400([Status400])

            /** Invalid request */
            case status409([Status409])

            public var success: EvenLegacySubAccount? {
                switch self {
                case .status201(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status201(let response): return response
                case .status400(let response): return response
                case .status409(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status201: return 201
                case .status400: return 400
                case .status409: return 409
                }
            }

            public var successful: Bool {
                switch self {
                case .status201: return true
                case .status400: return false
                case .status409: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 201: self = try .status201(decoder.decode(EvenLegacySubAccount.self, from: data))
                case 400: self = try .status400(decoder.decode([Status400].self, from: data))
                case 409: self = try .status409(decoder.decode([Status409].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
