//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenWatched: APIModel {

    /** The last playhead position watched for the item. */
    public var position: Int

    public var firstWatchedDate: DateTime

    public var lastWatchedDate: DateTime

    /** The id of the item watched. */
    public var itemId: String?

    public init(position: Int, firstWatchedDate: DateTime, lastWatchedDate: DateTime, itemId: String? = nil) {
        self.position = position
        self.firstWatchedDate = firstWatchedDate
        self.lastWatchedDate = lastWatchedDate
        self.itemId = itemId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        position = try container.decode("position")
        firstWatchedDate = try container.decode("firstWatchedDate")
        lastWatchedDate = try container.decode("lastWatchedDate")
        itemId = try container.decodeIfPresent("itemId")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(position, forKey: "position")
        try container.encode(firstWatchedDate, forKey: "firstWatchedDate")
        try container.encode(lastWatchedDate, forKey: "lastWatchedDate")
        try container.encodeIfPresent(itemId, forKey: "itemId")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenWatched else { return false }
      guard self.position == object.position else { return false }
      guard self.firstWatchedDate == object.firstWatchedDate else { return false }
      guard self.lastWatchedDate == object.lastWatchedDate else { return false }
      guard self.itemId == object.itemId else { return false }
      return true
    }

    public static func == (lhs: EvenWatched, rhs: EvenWatched) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
