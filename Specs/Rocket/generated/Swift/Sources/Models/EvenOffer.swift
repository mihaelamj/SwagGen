//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenOffer: EvenOfferRights {

    public enum EvenAvailability: String, Codable, Equatable, CaseIterable {
        case available = "Available"
        case comingSoon = "ComingSoon"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenAvailability(rawValue: rawValue) ?? .undecodable
        }
    }

    public var price: Float

    public var availability: EvenAvailability

    public var endDate: DateTime?

    public var name: String?

    public var startDate: DateTime?

    /** The code of the subscription this offer is offered under, if any. */
    public var subscriptionCode: String?

    public init(deliveryType: EvenDeliveryType, scopes: [String], resolution: EvenResolution, ownership: EvenOwnership, price: Float, availability: EvenAvailability, exclusionRules: [EvenExclusionRule]? = nil, maxDownloads: Int? = nil, maxPlays: Int? = nil, playPeriod: Int? = nil, rentalPeriod: Int? = nil, endDate: DateTime? = nil, name: String? = nil, startDate: DateTime? = nil, subscriptionCode: String? = nil) {
        self.price = price
        self.availability = availability
        self.endDate = endDate
        self.name = name
        self.startDate = startDate
        self.subscriptionCode = subscriptionCode
        super.init(deliveryType: deliveryType, scopes: scopes, resolution: resolution, ownership: ownership, exclusionRules: exclusionRules, maxDownloads: maxDownloads, maxPlays: maxPlays, playPeriod: playPeriod, rentalPeriod: rentalPeriod)
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        price = try container.decode("price")
        availability = try container.decode("availability")
        endDate = try container.decodeIfPresent("endDate")
        name = try container.decodeIfPresent("name")
        startDate = try container.decodeIfPresent("startDate")
        subscriptionCode = try container.decodeIfPresent("subscriptionCode")
        try super.init(from: decoder)
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(price, forKey: "price")
        try container.encode(availability, forKey: "availability")
        try container.encodeIfPresent(endDate, forKey: "endDate")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(startDate, forKey: "startDate")
        try container.encodeIfPresent(subscriptionCode, forKey: "subscriptionCode")
        try super.encode(to: encoder)
    }

    override public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenOffer else { return false }
      guard self.price == object.price else { return false }
      guard self.availability == object.availability else { return false }
      guard self.endDate == object.endDate else { return false }
      guard self.name == object.name else { return false }
      guard self.startDate == object.startDate else { return false }
      guard self.subscriptionCode == object.subscriptionCode else { return false }
      return super.isEqual(to: object)
    }
}
