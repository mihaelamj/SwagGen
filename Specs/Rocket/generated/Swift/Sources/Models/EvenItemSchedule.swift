//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenItemSchedule: APIModel {

    public var id: String

    public var channelId: String

    /** The date and time this schedule starts. */
    public var startDate: DateTime

    /** The date and time this schedule ends. */
    public var endDate: DateTime

    /** True if this is a featured item schedule. */
    public var featured: Bool?

    /** The item this schedule targets. */
    public var item: EvenItemSummary?

    /** True if this is a live event. */
    public var live: Bool?

    /** True if this has been aired previously on the same channel. */
    public var `repeat`: Bool?

    public init(id: String, channelId: String, startDate: DateTime, endDate: DateTime, featured: Bool? = nil, item: EvenItemSummary? = nil, live: Bool? = nil, `repeat`: Bool? = nil) {
        self.id = id
        self.channelId = channelId
        self.startDate = startDate
        self.endDate = endDate
        self.featured = featured
        self.item = item
        self.live = live
        self.`repeat` = `repeat`
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        channelId = try container.decode("channelId")
        startDate = try container.decode("startDate")
        endDate = try container.decode("endDate")
        featured = try container.decodeIfPresent("featured")
        item = try container.decodeIfPresent("item")
        live = try container.decodeIfPresent("live")
        `repeat` = try container.decodeIfPresent("repeat")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(channelId, forKey: "channelId")
        try container.encode(startDate, forKey: "startDate")
        try container.encode(endDate, forKey: "endDate")
        try container.encodeIfPresent(featured, forKey: "featured")
        try container.encodeIfPresent(item, forKey: "item")
        try container.encodeIfPresent(live, forKey: "live")
        try container.encodeIfPresent(`repeat`, forKey: "repeat")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenItemSchedule else { return false }
      guard self.id == object.id else { return false }
      guard self.channelId == object.channelId else { return false }
      guard self.startDate == object.startDate else { return false }
      guard self.endDate == object.endDate else { return false }
      guard self.featured == object.featured else { return false }
      guard self.item == object.item else { return false }
      guard self.live == object.live else { return false }
      guard self.`repeat` == object.`repeat` else { return false }
      return true
    }

    public static func == (lhs: EvenItemSchedule, rhs: EvenItemSchedule) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
