//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A pageable list of items. */
public class EvenItemList: APIModel {

    /** The id of this list */
    public var id: String

    /** The total size of the list */
    public var size: Int

    /** A list of items */
    public var items: [EvenItemSummary]

    /** Metadata describing how to load the next or previous page of the list */
    public var paging: EvenPagination

    /** The path of this list */
    public var path: String

    /** A map of custom fields defined by a curator for a list. */
    public var customFields: [String: Any]?

    /** A full description of this list. */
    public var description: String?

    public var images: [String: URL]?

    /** The types of items in the list */
    public var itemTypes: [EvenItemType]?

    /** If this list is parameterized, then this contains the parameter of the list in the format `name:value`.
For example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`. */
    public var parameter: String?

    /** A short description of this list. */
    public var shortDescription: String?

    /** The tagline of the item. */
    public var tagline: String?

    /** The title of this list */
    public var title: String?

    public init(id: String, size: Int, items: [EvenItemSummary], paging: EvenPagination, path: String, customFields: [String: Any]? = nil, description: String? = nil, images: [String: URL]? = nil, itemTypes: [EvenItemType]? = nil, parameter: String? = nil, shortDescription: String? = nil, tagline: String? = nil, title: String? = nil) {
        self.id = id
        self.size = size
        self.items = items
        self.paging = paging
        self.path = path
        self.customFields = customFields
        self.description = description
        self.images = images
        self.itemTypes = itemTypes
        self.parameter = parameter
        self.shortDescription = shortDescription
        self.tagline = tagline
        self.title = title
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        size = try container.decode("size")
        items = try container.decodeArray("items")
        paging = try container.decode("paging")
        path = try container.decode("path")
        customFields = try container.decodeAnyIfPresent("customFields")
        description = try container.decodeIfPresent("description")
        images = try container.decodeIfPresent("images")
        itemTypes = try container.decodeArrayIfPresent("itemTypes")
        parameter = try container.decodeIfPresent("parameter")
        shortDescription = try container.decodeIfPresent("shortDescription")
        tagline = try container.decodeIfPresent("tagline")
        title = try container.decodeIfPresent("title")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(size, forKey: "size")
        try container.encode(items, forKey: "items")
        try container.encode(paging, forKey: "paging")
        try container.encode(path, forKey: "path")
        try container.encodeAnyIfPresent(customFields, forKey: "customFields")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(images, forKey: "images")
        try container.encodeIfPresent(itemTypes, forKey: "itemTypes")
        try container.encodeIfPresent(parameter, forKey: "parameter")
        try container.encodeIfPresent(shortDescription, forKey: "shortDescription")
        try container.encodeIfPresent(tagline, forKey: "tagline")
        try container.encodeIfPresent(title, forKey: "title")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenItemList else { return false }
      guard self.id == object.id else { return false }
      guard self.size == object.size else { return false }
      guard self.items == object.items else { return false }
      guard self.paging == object.paging else { return false }
      guard self.path == object.path else { return false }
      guard NSDictionary(dictionary: self.customFields ?? [:]).isEqual(to: object.customFields ?? [:]) else { return false }
      guard self.description == object.description else { return false }
      guard self.images == object.images else { return false }
      guard self.itemTypes == object.itemTypes else { return false }
      guard self.parameter == object.parameter else { return false }
      guard self.shortDescription == object.shortDescription else { return false }
      guard self.tagline == object.tagline else { return false }
      guard self.title == object.title else { return false }
      return true
    }

    public static func == (lhs: EvenItemList, rhs: EvenItemList) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
