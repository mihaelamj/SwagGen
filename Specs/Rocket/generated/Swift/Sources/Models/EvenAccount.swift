//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenAccount: APIModel {

    /** The id of the account. */
    public var id: String

    /** The email address belonging to the account. */
    public var email: String

    /** Whether usage tracking is associated with the account or anonymous. */
    public var trackingEnabled: Bool

    /** When an account level pin is defined this will be true. */
    public var pinEnabled: Bool

    /** Whether the account has opted in or out of marketing material. */
    public var marketingEnabled: Bool

    /** The id of the primary profile. */
    public var primaryProfileId: String

    /** The active subscription code for an account.
The value of this should be passed to any endpoints accepting a `sub` query parameter.
 */
    public var subscriptionCode: String

    /** The list of profiles under this account. */
    public var profiles: [EvenProfileSummary]

    /** The id of the payment instrument to use by default for account transactions. */
    public var defaultPaymentInstrumentId: String?

    /** The list of entitlements to playback specific items. */
    public var entitlements: [EvenEntitlement]?

    /** The first name of the account holder. */
    public var firstName: String?

    /** The last name of the account holder. */
    public var lastName: String?

    /** The classification rating defining the minimum rating level a user should be
forced to enter the account pin code for playback. Anything at this rating
level or above will require the pin for playback.
e.g. AUOFLC-MA15+
If you want to disable this guard pass an empty string or `null`.
 */
    public var minRatingPlaybackGuard: String?

    /** The list of subscriptions, if any, the account has signed up to. */
    public var subscriptions: [EvenSubscription]?

    /** Whether the account has used up their free trial period of a plan. */
    public var usedFreeTrial: Bool?

    public init(id: String, email: String, trackingEnabled: Bool, pinEnabled: Bool, marketingEnabled: Bool, primaryProfileId: String, subscriptionCode: String, profiles: [EvenProfileSummary], defaultPaymentInstrumentId: String? = nil, entitlements: [EvenEntitlement]? = nil, firstName: String? = nil, lastName: String? = nil, minRatingPlaybackGuard: String? = nil, subscriptions: [EvenSubscription]? = nil, usedFreeTrial: Bool? = nil) {
        self.id = id
        self.email = email
        self.trackingEnabled = trackingEnabled
        self.pinEnabled = pinEnabled
        self.marketingEnabled = marketingEnabled
        self.primaryProfileId = primaryProfileId
        self.subscriptionCode = subscriptionCode
        self.profiles = profiles
        self.defaultPaymentInstrumentId = defaultPaymentInstrumentId
        self.entitlements = entitlements
        self.firstName = firstName
        self.lastName = lastName
        self.minRatingPlaybackGuard = minRatingPlaybackGuard
        self.subscriptions = subscriptions
        self.usedFreeTrial = usedFreeTrial
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        email = try container.decode("email")
        trackingEnabled = try container.decode("trackingEnabled")
        pinEnabled = try container.decode("pinEnabled")
        marketingEnabled = try container.decode("marketingEnabled")
        primaryProfileId = try container.decode("primaryProfileId")
        subscriptionCode = try container.decode("subscriptionCode")
        profiles = try container.decodeArray("profiles")
        defaultPaymentInstrumentId = try container.decodeIfPresent("defaultPaymentInstrumentId")
        entitlements = try container.decodeArrayIfPresent("entitlements")
        firstName = try container.decodeIfPresent("firstName")
        lastName = try container.decodeIfPresent("lastName")
        minRatingPlaybackGuard = try container.decodeIfPresent("minRatingPlaybackGuard")
        subscriptions = try container.decodeArrayIfPresent("subscriptions")
        usedFreeTrial = try container.decodeIfPresent("usedFreeTrial")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(email, forKey: "email")
        try container.encode(trackingEnabled, forKey: "trackingEnabled")
        try container.encode(pinEnabled, forKey: "pinEnabled")
        try container.encode(marketingEnabled, forKey: "marketingEnabled")
        try container.encode(primaryProfileId, forKey: "primaryProfileId")
        try container.encode(subscriptionCode, forKey: "subscriptionCode")
        try container.encode(profiles, forKey: "profiles")
        try container.encodeIfPresent(defaultPaymentInstrumentId, forKey: "defaultPaymentInstrumentId")
        try container.encodeIfPresent(entitlements, forKey: "entitlements")
        try container.encodeIfPresent(firstName, forKey: "firstName")
        try container.encodeIfPresent(lastName, forKey: "lastName")
        try container.encodeIfPresent(minRatingPlaybackGuard, forKey: "minRatingPlaybackGuard")
        try container.encodeIfPresent(subscriptions, forKey: "subscriptions")
        try container.encodeIfPresent(usedFreeTrial, forKey: "usedFreeTrial")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenAccount else { return false }
      guard self.id == object.id else { return false }
      guard self.email == object.email else { return false }
      guard self.trackingEnabled == object.trackingEnabled else { return false }
      guard self.pinEnabled == object.pinEnabled else { return false }
      guard self.marketingEnabled == object.marketingEnabled else { return false }
      guard self.primaryProfileId == object.primaryProfileId else { return false }
      guard self.subscriptionCode == object.subscriptionCode else { return false }
      guard self.profiles == object.profiles else { return false }
      guard self.defaultPaymentInstrumentId == object.defaultPaymentInstrumentId else { return false }
      guard self.entitlements == object.entitlements else { return false }
      guard self.firstName == object.firstName else { return false }
      guard self.lastName == object.lastName else { return false }
      guard self.minRatingPlaybackGuard == object.minRatingPlaybackGuard else { return false }
      guard self.subscriptions == object.subscriptions else { return false }
      guard self.usedFreeTrial == object.usedFreeTrial else { return false }
      return true
    }

    public static func == (lhs: EvenAccount, rhs: EvenAccount) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
