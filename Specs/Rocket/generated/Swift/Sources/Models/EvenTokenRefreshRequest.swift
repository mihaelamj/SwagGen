//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenTokenRefreshRequest: APIModel {

    /** If you specify a cookie type then a content filter cookie will be returned
    along with the token(s). This is only really intended for web based clients which
    need to pass the cookies to a server to render a page based on the users
    content filters, e.g subscription code.
    If type `Session` the cookie will be session based.
    If type `Persistent` the cookie will have a medium term lifespan.
    If undefined no cookies will be set.
     */
    public enum EvenCookieType: String, Codable, Equatable, CaseIterable {
        case session = "Session"
        case persistent = "Persistent"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenCookieType(rawValue: rawValue) ?? .undecodable
        }
    }

    /** The token to refresh. */
    public var token: String

    /** If you specify a cookie type then a content filter cookie will be returned
along with the token(s). This is only really intended for web based clients which
need to pass the cookies to a server to render a page based on the users
content filters, e.g subscription code.
If type `Session` the cookie will be session based.
If type `Persistent` the cookie will have a medium term lifespan.
If undefined no cookies will be set.
 */
    public var cookieType: EvenCookieType?

    public init(token: String, cookieType: EvenCookieType? = nil) {
        self.token = token
        self.cookieType = cookieType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        token = try container.decode("token")
        cookieType = try container.decodeIfPresent("cookieType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(token, forKey: "token")
        try container.encodeIfPresent(cookieType, forKey: "cookieType")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenTokenRefreshRequest else { return false }
      guard self.token == object.token else { return false }
      guard self.cookieType == object.cookieType else { return false }
      return true
    }

    public static func == (lhs: EvenTokenRefreshRequest, rhs: EvenTokenRefreshRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
