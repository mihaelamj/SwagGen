//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenItemDetail: EvenItemSummary {

    /** Advisory text about this item, related to the classification */
    public var advisoryText: String?

    /** Copyright information about this item */
    public var copyright: String?

    /** A list of credits associated with this item. */
    public var credits: [EvenCredit]?

    /** An ordered list of custom name-value-pair item metadata.
Usually displayed on an item detail page.
 */
    public var customMetadata: [EvenItemCustomMetadata]?

    /** The description of this item. */
    public var description: String?

    /** The distributor of this item. */
    public var distributor: String?

    /** The full name of an episode. */
    public var episodeName: String?

    /** A list of episodes associated with this item. */
    public var episodes: EvenItemList?

    /** The optional date of an event.
Specific to a Program item type.
 */
    public var eventDate: DateTime?

    /** An array of genre paths mapping to the values within the `genres` array from ItemSummary.
 */
    public var genrePaths: [String]?

    /** The optional location (e.g. city) of an event.
Specific to a Program item type.
 */
    public var location: String?

    /** The season associated with this item. */
    public var season: EvenItemDetail?

    /** A list of seasons associated with this item. */
    public var seasons: EvenItemList?

    /** The season associated with this item. */
    public var show: EvenItemDetail?

    /** The total number of users who have rated this item. */
    public var totalUserRatings: Double?

    /** A list of trailers associated with this item. */
    public var trailers: [EvenItemSummary]?

    /** The optional venue of an event.
Specific to a Program item type.
 */
    public var venue: String?

    public init(id: String, type: EvenItemType, path: String, title: String, availableEpisodeCount: Int? = nil, availableSeasonCount: Int? = nil, averageUserRating: Double? = nil, badge: String? = nil, classification: EvenClassificationSummary? = nil, contextualTitle: String? = nil, customFields: [String: Any]? = nil, customId: String? = nil, duration: Int? = nil, episodeCount: Int? = nil, episodeNumber: Int? = nil, genres: [String]? = nil, hasClosedCaptions: Bool? = nil, images: [String: URL]? = nil, offers: [EvenOffer]? = nil, releaseYear: Int? = nil, scopes: [String]? = nil, seasonId: String? = nil, seasonNumber: Int? = nil, shortDescription: String? = nil, showId: String? = nil, tagline: String? = nil, watchPath: String? = nil, advisoryText: String? = nil, copyright: String? = nil, credits: [EvenCredit]? = nil, customMetadata: [EvenItemCustomMetadata]? = nil, description: String? = nil, distributor: String? = nil, episodeName: String? = nil, episodes: EvenItemList? = nil, eventDate: DateTime? = nil, genrePaths: [String]? = nil, location: String? = nil, season: EvenItemDetail? = nil, seasons: EvenItemList? = nil, show: EvenItemDetail? = nil, totalUserRatings: Double? = nil, trailers: [EvenItemSummary]? = nil, venue: String? = nil) {
        self.advisoryText = advisoryText
        self.copyright = copyright
        self.credits = credits
        self.customMetadata = customMetadata
        self.description = description
        self.distributor = distributor
        self.episodeName = episodeName
        self.episodes = episodes
        self.eventDate = eventDate
        self.genrePaths = genrePaths
        self.location = location
        self.season = season
        self.seasons = seasons
        self.show = show
        self.totalUserRatings = totalUserRatings
        self.trailers = trailers
        self.venue = venue
        super.init(id: id, type: type, path: path, title: title, availableEpisodeCount: availableEpisodeCount, availableSeasonCount: availableSeasonCount, averageUserRating: averageUserRating, badge: badge, classification: classification, contextualTitle: contextualTitle, customFields: customFields, customId: customId, duration: duration, episodeCount: episodeCount, episodeNumber: episodeNumber, genres: genres, hasClosedCaptions: hasClosedCaptions, images: images, offers: offers, releaseYear: releaseYear, scopes: scopes, seasonId: seasonId, seasonNumber: seasonNumber, shortDescription: shortDescription, showId: showId, tagline: tagline, watchPath: watchPath)
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        advisoryText = try container.decodeIfPresent("advisoryText")
        copyright = try container.decodeIfPresent("copyright")
        credits = try container.decodeArrayIfPresent("credits")
        customMetadata = try container.decodeArrayIfPresent("customMetadata")
        description = try container.decodeIfPresent("description")
        distributor = try container.decodeIfPresent("distributor")
        episodeName = try container.decodeIfPresent("episodeName")
        episodes = try container.decodeIfPresent("episodes")
        eventDate = try container.decodeIfPresent("eventDate")
        genrePaths = try container.decodeArrayIfPresent("genrePaths")
        location = try container.decodeIfPresent("location")
        season = try container.decodeIfPresent("season")
        seasons = try container.decodeIfPresent("seasons")
        show = try container.decodeIfPresent("show")
        totalUserRatings = try container.decodeIfPresent("totalUserRatings")
        trailers = try container.decodeArrayIfPresent("trailers")
        venue = try container.decodeIfPresent("venue")
        try super.init(from: decoder)
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(advisoryText, forKey: "advisoryText")
        try container.encodeIfPresent(copyright, forKey: "copyright")
        try container.encodeIfPresent(credits, forKey: "credits")
        try container.encodeIfPresent(customMetadata, forKey: "customMetadata")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(distributor, forKey: "distributor")
        try container.encodeIfPresent(episodeName, forKey: "episodeName")
        try container.encodeIfPresent(episodes, forKey: "episodes")
        try container.encodeIfPresent(eventDate, forKey: "eventDate")
        try container.encodeIfPresent(genrePaths, forKey: "genrePaths")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(season, forKey: "season")
        try container.encodeIfPresent(seasons, forKey: "seasons")
        try container.encodeIfPresent(show, forKey: "show")
        try container.encodeIfPresent(totalUserRatings, forKey: "totalUserRatings")
        try container.encodeIfPresent(trailers, forKey: "trailers")
        try container.encodeIfPresent(venue, forKey: "venue")
        try super.encode(to: encoder)
    }

    override public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenItemDetail else { return false }
      guard self.advisoryText == object.advisoryText else { return false }
      guard self.copyright == object.copyright else { return false }
      guard self.credits == object.credits else { return false }
      guard self.customMetadata == object.customMetadata else { return false }
      guard self.description == object.description else { return false }
      guard self.distributor == object.distributor else { return false }
      guard self.episodeName == object.episodeName else { return false }
      guard self.episodes == object.episodes else { return false }
      guard self.eventDate == object.eventDate else { return false }
      guard self.genrePaths == object.genrePaths else { return false }
      guard self.location == object.location else { return false }
      guard self.season == object.season else { return false }
      guard self.seasons == object.seasons else { return false }
      guard self.show == object.show else { return false }
      guard self.totalUserRatings == object.totalUserRatings else { return false }
      guard self.trailers == object.trailers else { return false }
      guard self.venue == object.venue else { return false }
      return super.isEqual(to: object)
    }
}
