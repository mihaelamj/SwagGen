//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenNavEntry: APIModel {

    /** Child nav entries. */
    public var children: [EvenNavEntry]?

    /** Embedded content to display in a navigation menu. */
    public var content: EvenNavContent?

    /** A map of custom fields defined by a curator for a nav entry. */
    public var customFields: [String: Any]?

    /** True if this is a featured menu item.
Featured menu items may have a more prominent presentation than others in the navigation.
 */
    public var featured: Bool?

    /** The text label for this nav entry. */
    public var label: String?

    /** The path this nav entry links to.
May be undefined if the nav entry is not clickable e.g. a nav heading.
If the value begins with `http` then it's an external url.
 */
    public var path: String?

    public init(children: [EvenNavEntry]? = nil, content: EvenNavContent? = nil, customFields: [String: Any]? = nil, featured: Bool? = nil, label: String? = nil, path: String? = nil) {
        self.children = children
        self.content = content
        self.customFields = customFields
        self.featured = featured
        self.label = label
        self.path = path
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        children = try container.decodeArrayIfPresent("children")
        content = try container.decodeIfPresent("content")
        customFields = try container.decodeAnyIfPresent("customFields")
        featured = try container.decodeIfPresent("featured")
        label = try container.decodeIfPresent("label")
        path = try container.decodeIfPresent("path")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(children, forKey: "children")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeAnyIfPresent(customFields, forKey: "customFields")
        try container.encodeIfPresent(featured, forKey: "featured")
        try container.encodeIfPresent(label, forKey: "label")
        try container.encodeIfPresent(path, forKey: "path")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenNavEntry else { return false }
      guard self.children == object.children else { return false }
      guard self.content == object.content else { return false }
      guard NSDictionary(dictionary: self.customFields ?? [:]).isEqual(to: object.customFields ?? [:]) else { return false }
      guard self.featured == object.featured else { return false }
      guard self.label == object.label else { return false }
      guard self.path == object.path else { return false }
      return true
    }

    public static func == (lhs: EvenNavEntry, rhs: EvenNavEntry) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
