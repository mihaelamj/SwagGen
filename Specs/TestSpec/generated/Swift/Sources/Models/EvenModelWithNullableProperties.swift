//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenModelWithNullableProperties: APIModel {

    /** a required and not nullable property */
    public var requiredNotNullable: String

    /** a required and nullable property */
    public var requiredNullable: String?

    /** a required and not nullable property with nullable false implicitly declared */
    public var requiredImplicitNotNullable: String

    /** a not required and not nullable property */
    public var notRequiredNotNullable: String?

    /** a not required and nullable property */
    public var notRequiredNullable: String?

    public init(requiredNotNullable: String, requiredNullable: String?, requiredImplicitNotNullable: String, notRequiredNotNullable: String? = nil, notRequiredNullable: String? = nil) {
        self.requiredNotNullable = requiredNotNullable
        self.requiredNullable = requiredNullable
        self.requiredImplicitNotNullable = requiredImplicitNotNullable
        self.notRequiredNotNullable = notRequiredNotNullable
        self.notRequiredNullable = notRequiredNullable
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        requiredNotNullable = try container.decode("requiredNotNullable")
        requiredNullable = try container.decodeIfPresent("requiredNullable")
        requiredImplicitNotNullable = try container.decode("requiredImplicitNotNullable")
        notRequiredNotNullable = try container.decodeIfPresent("notRequiredNotNullable")
        notRequiredNullable = try container.decodeIfPresent("notRequiredNullable")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(requiredNotNullable, forKey: "requiredNotNullable")
        try container.encodeIfPresent(requiredNullable, forKey: "requiredNullable")
        try container.encode(requiredImplicitNotNullable, forKey: "requiredImplicitNotNullable")
        try container.encodeIfPresent(notRequiredNotNullable, forKey: "notRequiredNotNullable")
        try container.encodeIfPresent(notRequiredNullable, forKey: "notRequiredNullable")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenModelWithNullableProperties else { return false }
      guard self.requiredNotNullable == object.requiredNotNullable else { return false }
      guard self.requiredNullable == object.requiredNullable else { return false }
      guard self.requiredImplicitNotNullable == object.requiredImplicitNotNullable else { return false }
      guard self.notRequiredNotNullable == object.notRequiredNotNullable else { return false }
      guard self.notRequiredNullable == object.notRequiredNullable else { return false }
      return true
    }

    public static func == (lhs: EvenModelWithNullableProperties, rhs: EvenModelWithNullableProperties) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
