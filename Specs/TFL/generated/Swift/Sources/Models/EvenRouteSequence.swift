//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenRouteSequence: APIModel {

    public var direction: String?

    public var isOutboundOnly: Bool?

    public var lineId: String?

    public var lineName: String?

    public var lineStrings: [String]?

    public var mode: String?

    public var orderedLineRoutes: [EvenOrderedRoute]?

    public var stations: [EvenMatchedStop]?

    public var stopPointSequences: [EvenStopPointSequence]?

    public init(direction: String? = nil, isOutboundOnly: Bool? = nil, lineId: String? = nil, lineName: String? = nil, lineStrings: [String]? = nil, mode: String? = nil, orderedLineRoutes: [EvenOrderedRoute]? = nil, stations: [EvenMatchedStop]? = nil, stopPointSequences: [EvenStopPointSequence]? = nil) {
        self.direction = direction
        self.isOutboundOnly = isOutboundOnly
        self.lineId = lineId
        self.lineName = lineName
        self.lineStrings = lineStrings
        self.mode = mode
        self.orderedLineRoutes = orderedLineRoutes
        self.stations = stations
        self.stopPointSequences = stopPointSequences
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        direction = try container.decodeIfPresent("direction")
        isOutboundOnly = try container.decodeIfPresent("isOutboundOnly")
        lineId = try container.decodeIfPresent("lineId")
        lineName = try container.decodeIfPresent("lineName")
        lineStrings = try container.decodeArrayIfPresent("lineStrings")
        mode = try container.decodeIfPresent("mode")
        orderedLineRoutes = try container.decodeArrayIfPresent("orderedLineRoutes")
        stations = try container.decodeArrayIfPresent("stations")
        stopPointSequences = try container.decodeArrayIfPresent("stopPointSequences")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(isOutboundOnly, forKey: "isOutboundOnly")
        try container.encodeIfPresent(lineId, forKey: "lineId")
        try container.encodeIfPresent(lineName, forKey: "lineName")
        try container.encodeIfPresent(lineStrings, forKey: "lineStrings")
        try container.encodeIfPresent(mode, forKey: "mode")
        try container.encodeIfPresent(orderedLineRoutes, forKey: "orderedLineRoutes")
        try container.encodeIfPresent(stations, forKey: "stations")
        try container.encodeIfPresent(stopPointSequences, forKey: "stopPointSequences")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenRouteSequence else { return false }
      guard self.direction == object.direction else { return false }
      guard self.isOutboundOnly == object.isOutboundOnly else { return false }
      guard self.lineId == object.lineId else { return false }
      guard self.lineName == object.lineName else { return false }
      guard self.lineStrings == object.lineStrings else { return false }
      guard self.mode == object.mode else { return false }
      guard self.orderedLineRoutes == object.orderedLineRoutes else { return false }
      guard self.stations == object.stations else { return false }
      guard self.stopPointSequences == object.stopPointSequences else { return false }
      return true
    }

    public static func == (lhs: EvenRouteSequence, rhs: EvenRouteSequence) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
