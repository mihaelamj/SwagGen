//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenRouteSection: APIModel {

    /** eg: Destination Name */
    public var destinationName: String?

    /** eg: N or S or I or O */
    public var direction: String?

    /** The Id of the route */
    public var id: String?

    /** The Id of the Line */
    public var lineId: String?

    /** eg: Path coordindates */
    public var lineString: String?

    /** Name such as "72" */
    public var name: String?

    /** eg: Origination Name */
    public var originationName: String?

    /** The route code */
    public var routeCode: String?

    public var routeSectionNaptanEntrySequence: [EvenRouteSectionNaptanEntrySequence]?

    public init(destinationName: String? = nil, direction: String? = nil, id: String? = nil, lineId: String? = nil, lineString: String? = nil, name: String? = nil, originationName: String? = nil, routeCode: String? = nil, routeSectionNaptanEntrySequence: [EvenRouteSectionNaptanEntrySequence]? = nil) {
        self.destinationName = destinationName
        self.direction = direction
        self.id = id
        self.lineId = lineId
        self.lineString = lineString
        self.name = name
        self.originationName = originationName
        self.routeCode = routeCode
        self.routeSectionNaptanEntrySequence = routeSectionNaptanEntrySequence
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        destinationName = try container.decodeIfPresent("destinationName")
        direction = try container.decodeIfPresent("direction")
        id = try container.decodeIfPresent("id")
        lineId = try container.decodeIfPresent("lineId")
        lineString = try container.decodeIfPresent("lineString")
        name = try container.decodeIfPresent("name")
        originationName = try container.decodeIfPresent("originationName")
        routeCode = try container.decodeIfPresent("routeCode")
        routeSectionNaptanEntrySequence = try container.decodeArrayIfPresent("routeSectionNaptanEntrySequence")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(destinationName, forKey: "destinationName")
        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lineId, forKey: "lineId")
        try container.encodeIfPresent(lineString, forKey: "lineString")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(originationName, forKey: "originationName")
        try container.encodeIfPresent(routeCode, forKey: "routeCode")
        try container.encodeIfPresent(routeSectionNaptanEntrySequence, forKey: "routeSectionNaptanEntrySequence")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenRouteSection else { return false }
      guard self.destinationName == object.destinationName else { return false }
      guard self.direction == object.direction else { return false }
      guard self.id == object.id else { return false }
      guard self.lineId == object.lineId else { return false }
      guard self.lineString == object.lineString else { return false }
      guard self.name == object.name else { return false }
      guard self.originationName == object.originationName else { return false }
      guard self.routeCode == object.routeCode else { return false }
      guard self.routeSectionNaptanEntrySequence == object.routeSectionNaptanEntrySequence else { return false }
      return true
    }

    public static func == (lhs: EvenRouteSection, rhs: EvenRouteSection) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
