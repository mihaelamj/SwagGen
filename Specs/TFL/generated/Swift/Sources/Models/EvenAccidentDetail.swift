//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenAccidentDetail: APIModel {

    public var borough: String?

    public var casualties: [EvenCasualty]?

    public var date: DateTime?

    public var id: Int?

    public var lat: Double?

    public var location: String?

    public var lon: Double?

    public var severity: String?

    public var vehicles: [EvenVehicle]?

    public init(borough: String? = nil, casualties: [EvenCasualty]? = nil, date: DateTime? = nil, id: Int? = nil, lat: Double? = nil, location: String? = nil, lon: Double? = nil, severity: String? = nil, vehicles: [EvenVehicle]? = nil) {
        self.borough = borough
        self.casualties = casualties
        self.date = date
        self.id = id
        self.lat = lat
        self.location = location
        self.lon = lon
        self.severity = severity
        self.vehicles = vehicles
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        borough = try container.decodeIfPresent("borough")
        casualties = try container.decodeArrayIfPresent("casualties")
        date = try container.decodeIfPresent("date")
        id = try container.decodeIfPresent("id")
        lat = try container.decodeIfPresent("lat")
        location = try container.decodeIfPresent("location")
        lon = try container.decodeIfPresent("lon")
        severity = try container.decodeIfPresent("severity")
        vehicles = try container.decodeArrayIfPresent("vehicles")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(borough, forKey: "borough")
        try container.encodeIfPresent(casualties, forKey: "casualties")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lat, forKey: "lat")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(lon, forKey: "lon")
        try container.encodeIfPresent(severity, forKey: "severity")
        try container.encodeIfPresent(vehicles, forKey: "vehicles")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenAccidentDetail else { return false }
      guard self.borough == object.borough else { return false }
      guard self.casualties == object.casualties else { return false }
      guard self.date == object.date else { return false }
      guard self.id == object.id else { return false }
      guard self.lat == object.lat else { return false }
      guard self.location == object.location else { return false }
      guard self.lon == object.lon else { return false }
      guard self.severity == object.severity else { return false }
      guard self.vehicles == object.vehicles else { return false }
      return true
    }

    public static func == (lhs: EvenAccidentDetail, rhs: EvenAccidentDetail) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
