//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenLine: APIModel {

    public var created: DateTime?

    public var crowding: EvenCrowding?

    public var disruptions: [EvenDisruption]?

    public var id: String?

    public var lineStatuses: [EvenLineStatus]?

    public var modeName: String?

    public var modified: DateTime?

    public var name: String?

    public var routeSections: [EvenMatchedRoute]?

    public var serviceTypes: [EvenLineServiceTypeInfo]?

    public init(created: DateTime? = nil, crowding: EvenCrowding? = nil, disruptions: [EvenDisruption]? = nil, id: String? = nil, lineStatuses: [EvenLineStatus]? = nil, modeName: String? = nil, modified: DateTime? = nil, name: String? = nil, routeSections: [EvenMatchedRoute]? = nil, serviceTypes: [EvenLineServiceTypeInfo]? = nil) {
        self.created = created
        self.crowding = crowding
        self.disruptions = disruptions
        self.id = id
        self.lineStatuses = lineStatuses
        self.modeName = modeName
        self.modified = modified
        self.name = name
        self.routeSections = routeSections
        self.serviceTypes = serviceTypes
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        created = try container.decodeIfPresent("created")
        crowding = try container.decodeIfPresent("crowding")
        disruptions = try container.decodeArrayIfPresent("disruptions")
        id = try container.decodeIfPresent("id")
        lineStatuses = try container.decodeArrayIfPresent("lineStatuses")
        modeName = try container.decodeIfPresent("modeName")
        modified = try container.decodeIfPresent("modified")
        name = try container.decodeIfPresent("name")
        routeSections = try container.decodeArrayIfPresent("routeSections")
        serviceTypes = try container.decodeArrayIfPresent("serviceTypes")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(crowding, forKey: "crowding")
        try container.encodeIfPresent(disruptions, forKey: "disruptions")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lineStatuses, forKey: "lineStatuses")
        try container.encodeIfPresent(modeName, forKey: "modeName")
        try container.encodeIfPresent(modified, forKey: "modified")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(routeSections, forKey: "routeSections")
        try container.encodeIfPresent(serviceTypes, forKey: "serviceTypes")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenLine else { return false }
      guard self.created == object.created else { return false }
      guard self.crowding == object.crowding else { return false }
      guard self.disruptions == object.disruptions else { return false }
      guard self.id == object.id else { return false }
      guard self.lineStatuses == object.lineStatuses else { return false }
      guard self.modeName == object.modeName else { return false }
      guard self.modified == object.modified else { return false }
      guard self.name == object.name else { return false }
      guard self.routeSections == object.routeSections else { return false }
      guard self.serviceTypes == object.serviceTypes else { return false }
      return true
    }

    public static func == (lhs: EvenLine, rhs: EvenLine) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
