//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A DTO representing a list of possible journeys. */
public class EvenItineraryResult: APIModel {

    public var cycleHireDockingStationData: EvenJourneyPlannerCycleHireDockingStationData?

    public var journeyVector: EvenJourneyVector?

    public var journeys: [EvenJourney]?

    public var lines: [EvenLine]?

    public var recommendedMaxAgeMinutes: Int?

    public var searchCriteria: EvenSearchCriteria?

    public var stopMessages: [String]?

    public init(cycleHireDockingStationData: EvenJourneyPlannerCycleHireDockingStationData? = nil, journeyVector: EvenJourneyVector? = nil, journeys: [EvenJourney]? = nil, lines: [EvenLine]? = nil, recommendedMaxAgeMinutes: Int? = nil, searchCriteria: EvenSearchCriteria? = nil, stopMessages: [String]? = nil) {
        self.cycleHireDockingStationData = cycleHireDockingStationData
        self.journeyVector = journeyVector
        self.journeys = journeys
        self.lines = lines
        self.recommendedMaxAgeMinutes = recommendedMaxAgeMinutes
        self.searchCriteria = searchCriteria
        self.stopMessages = stopMessages
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        cycleHireDockingStationData = try container.decodeIfPresent("cycleHireDockingStationData")
        journeyVector = try container.decodeIfPresent("journeyVector")
        journeys = try container.decodeArrayIfPresent("journeys")
        lines = try container.decodeArrayIfPresent("lines")
        recommendedMaxAgeMinutes = try container.decodeIfPresent("recommendedMaxAgeMinutes")
        searchCriteria = try container.decodeIfPresent("searchCriteria")
        stopMessages = try container.decodeArrayIfPresent("stopMessages")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(cycleHireDockingStationData, forKey: "cycleHireDockingStationData")
        try container.encodeIfPresent(journeyVector, forKey: "journeyVector")
        try container.encodeIfPresent(journeys, forKey: "journeys")
        try container.encodeIfPresent(lines, forKey: "lines")
        try container.encodeIfPresent(recommendedMaxAgeMinutes, forKey: "recommendedMaxAgeMinutes")
        try container.encodeIfPresent(searchCriteria, forKey: "searchCriteria")
        try container.encodeIfPresent(stopMessages, forKey: "stopMessages")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenItineraryResult else { return false }
      guard self.cycleHireDockingStationData == object.cycleHireDockingStationData else { return false }
      guard self.journeyVector == object.journeyVector else { return false }
      guard self.journeys == object.journeys else { return false }
      guard self.lines == object.lines else { return false }
      guard self.recommendedMaxAgeMinutes == object.recommendedMaxAgeMinutes else { return false }
      guard self.searchCriteria == object.searchCriteria else { return false }
      guard self.stopMessages == object.stopMessages else { return false }
      return true
    }

    public static func == (lhs: EvenItineraryResult, rhs: EvenItineraryResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
