//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenLineRouteSection: APIModel {

    public var destination: String?

    public var direction: String?

    public var fromStation: String?

    public var routeId: Int?

    public var serviceType: String?

    public var toStation: String?

    public var vehicleDestinationText: String?

    public init(destination: String? = nil, direction: String? = nil, fromStation: String? = nil, routeId: Int? = nil, serviceType: String? = nil, toStation: String? = nil, vehicleDestinationText: String? = nil) {
        self.destination = destination
        self.direction = direction
        self.fromStation = fromStation
        self.routeId = routeId
        self.serviceType = serviceType
        self.toStation = toStation
        self.vehicleDestinationText = vehicleDestinationText
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        destination = try container.decodeIfPresent("destination")
        direction = try container.decodeIfPresent("direction")
        fromStation = try container.decodeIfPresent("fromStation")
        routeId = try container.decodeIfPresent("routeId")
        serviceType = try container.decodeIfPresent("serviceType")
        toStation = try container.decodeIfPresent("toStation")
        vehicleDestinationText = try container.decodeIfPresent("vehicleDestinationText")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(destination, forKey: "destination")
        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(fromStation, forKey: "fromStation")
        try container.encodeIfPresent(routeId, forKey: "routeId")
        try container.encodeIfPresent(serviceType, forKey: "serviceType")
        try container.encodeIfPresent(toStation, forKey: "toStation")
        try container.encodeIfPresent(vehicleDestinationText, forKey: "vehicleDestinationText")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenLineRouteSection else { return false }
      guard self.destination == object.destination else { return false }
      guard self.direction == object.direction else { return false }
      guard self.fromStation == object.fromStation else { return false }
      guard self.routeId == object.routeId else { return false }
      guard self.serviceType == object.serviceType else { return false }
      guard self.toStation == object.toStation else { return false }
      guard self.vehicleDestinationText == object.vehicleDestinationText else { return false }
      return true
    }

    public static func == (lhs: EvenLineRouteSection, rhs: EvenLineRouteSection) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
