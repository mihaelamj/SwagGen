//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenStopPoint: APIModel {

    public var accessibilitySummary: String?

    /** A bag of additional key/value pairs with extra information about this place. */
    public var additionalProperties: [EvenAdditionalProperties]?

    public var children: [EvenPlace]?

    public var childrenUrls: [String]?

    /** A human readable name. */
    public var commonName: String?

    /** The distance of the place from its search point, if this is the result
            of a geographical search, otherwise zero. */
    public var distance: Double?

    public var fullName: String?

    public var hubNaptanCode: String?

    public var icsCode: String?

    /** A unique identifier. */
    public var id: String?

    /** The indicator of the stop point e.g. "Stop K" */
    public var indicator: String?

    /** WGS84 latitude of the location. */
    public var lat: Double?

    public var lineGroup: [EvenLineGroup]?

    public var lineModeGroups: [EvenLineModeGroup]?

    public var lines: [EvenIdentifier]?

    /** WGS84 longitude of the location. */
    public var lon: Double?

    public var modes: [String]?

    public var naptanId: String?

    public var naptanMode: String?

    /** The type of Place. See /Place/Meta/placeTypes for possible values. */
    public var placeType: String?

    public var platformName: String?

    public var smsCode: String?

    public var stationNaptan: String?

    public var status: Bool?

    /** The stop letter, if it could be cleansed from the Indicator e.g. "K" */
    public var stopLetter: String?

    public var stopType: String?

    /** The unique location of this resource. */
    public var url: String?

    public init(accessibilitySummary: String? = nil, additionalProperties: [EvenAdditionalProperties]? = nil, children: [EvenPlace]? = nil, childrenUrls: [String]? = nil, commonName: String? = nil, distance: Double? = nil, fullName: String? = nil, hubNaptanCode: String? = nil, icsCode: String? = nil, id: String? = nil, indicator: String? = nil, lat: Double? = nil, lineGroup: [EvenLineGroup]? = nil, lineModeGroups: [EvenLineModeGroup]? = nil, lines: [EvenIdentifier]? = nil, lon: Double? = nil, modes: [String]? = nil, naptanId: String? = nil, naptanMode: String? = nil, placeType: String? = nil, platformName: String? = nil, smsCode: String? = nil, stationNaptan: String? = nil, status: Bool? = nil, stopLetter: String? = nil, stopType: String? = nil, url: String? = nil) {
        self.accessibilitySummary = accessibilitySummary
        self.additionalProperties = additionalProperties
        self.children = children
        self.childrenUrls = childrenUrls
        self.commonName = commonName
        self.distance = distance
        self.fullName = fullName
        self.hubNaptanCode = hubNaptanCode
        self.icsCode = icsCode
        self.id = id
        self.indicator = indicator
        self.lat = lat
        self.lineGroup = lineGroup
        self.lineModeGroups = lineModeGroups
        self.lines = lines
        self.lon = lon
        self.modes = modes
        self.naptanId = naptanId
        self.naptanMode = naptanMode
        self.placeType = placeType
        self.platformName = platformName
        self.smsCode = smsCode
        self.stationNaptan = stationNaptan
        self.status = status
        self.stopLetter = stopLetter
        self.stopType = stopType
        self.url = url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        accessibilitySummary = try container.decodeIfPresent("accessibilitySummary")
        additionalProperties = try container.decodeArrayIfPresent("additionalProperties")
        children = try container.decodeArrayIfPresent("children")
        childrenUrls = try container.decodeArrayIfPresent("childrenUrls")
        commonName = try container.decodeIfPresent("commonName")
        distance = try container.decodeIfPresent("distance")
        fullName = try container.decodeIfPresent("fullName")
        hubNaptanCode = try container.decodeIfPresent("hubNaptanCode")
        icsCode = try container.decodeIfPresent("icsCode")
        id = try container.decodeIfPresent("id")
        indicator = try container.decodeIfPresent("indicator")
        lat = try container.decodeIfPresent("lat")
        lineGroup = try container.decodeArrayIfPresent("lineGroup")
        lineModeGroups = try container.decodeArrayIfPresent("lineModeGroups")
        lines = try container.decodeArrayIfPresent("lines")
        lon = try container.decodeIfPresent("lon")
        modes = try container.decodeArrayIfPresent("modes")
        naptanId = try container.decodeIfPresent("naptanId")
        naptanMode = try container.decodeIfPresent("naptanMode")
        placeType = try container.decodeIfPresent("placeType")
        platformName = try container.decodeIfPresent("platformName")
        smsCode = try container.decodeIfPresent("smsCode")
        stationNaptan = try container.decodeIfPresent("stationNaptan")
        status = try container.decodeIfPresent("status")
        stopLetter = try container.decodeIfPresent("stopLetter")
        stopType = try container.decodeIfPresent("stopType")
        url = try container.decodeIfPresent("url")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(accessibilitySummary, forKey: "accessibilitySummary")
        try container.encodeIfPresent(additionalProperties, forKey: "additionalProperties")
        try container.encodeIfPresent(children, forKey: "children")
        try container.encodeIfPresent(childrenUrls, forKey: "childrenUrls")
        try container.encodeIfPresent(commonName, forKey: "commonName")
        try container.encodeIfPresent(distance, forKey: "distance")
        try container.encodeIfPresent(fullName, forKey: "fullName")
        try container.encodeIfPresent(hubNaptanCode, forKey: "hubNaptanCode")
        try container.encodeIfPresent(icsCode, forKey: "icsCode")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(indicator, forKey: "indicator")
        try container.encodeIfPresent(lat, forKey: "lat")
        try container.encodeIfPresent(lineGroup, forKey: "lineGroup")
        try container.encodeIfPresent(lineModeGroups, forKey: "lineModeGroups")
        try container.encodeIfPresent(lines, forKey: "lines")
        try container.encodeIfPresent(lon, forKey: "lon")
        try container.encodeIfPresent(modes, forKey: "modes")
        try container.encodeIfPresent(naptanId, forKey: "naptanId")
        try container.encodeIfPresent(naptanMode, forKey: "naptanMode")
        try container.encodeIfPresent(placeType, forKey: "placeType")
        try container.encodeIfPresent(platformName, forKey: "platformName")
        try container.encodeIfPresent(smsCode, forKey: "smsCode")
        try container.encodeIfPresent(stationNaptan, forKey: "stationNaptan")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(stopLetter, forKey: "stopLetter")
        try container.encodeIfPresent(stopType, forKey: "stopType")
        try container.encodeIfPresent(url, forKey: "url")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenStopPoint else { return false }
      guard self.accessibilitySummary == object.accessibilitySummary else { return false }
      guard self.additionalProperties == object.additionalProperties else { return false }
      guard self.children == object.children else { return false }
      guard self.childrenUrls == object.childrenUrls else { return false }
      guard self.commonName == object.commonName else { return false }
      guard self.distance == object.distance else { return false }
      guard self.fullName == object.fullName else { return false }
      guard self.hubNaptanCode == object.hubNaptanCode else { return false }
      guard self.icsCode == object.icsCode else { return false }
      guard self.id == object.id else { return false }
      guard self.indicator == object.indicator else { return false }
      guard self.lat == object.lat else { return false }
      guard self.lineGroup == object.lineGroup else { return false }
      guard self.lineModeGroups == object.lineModeGroups else { return false }
      guard self.lines == object.lines else { return false }
      guard self.lon == object.lon else { return false }
      guard self.modes == object.modes else { return false }
      guard self.naptanId == object.naptanId else { return false }
      guard self.naptanMode == object.naptanMode else { return false }
      guard self.placeType == object.placeType else { return false }
      guard self.platformName == object.platformName else { return false }
      guard self.smsCode == object.smsCode else { return false }
      guard self.stationNaptan == object.stationNaptan else { return false }
      guard self.status == object.status else { return false }
      guard self.stopLetter == object.stopLetter else { return false }
      guard self.stopType == object.stopType else { return false }
      guard self.url == object.url else { return false }
      return true
    }

    public static func == (lhs: EvenStopPoint, rhs: EvenStopPoint) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
