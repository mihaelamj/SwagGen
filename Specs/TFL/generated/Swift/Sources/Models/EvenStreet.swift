//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenStreet: APIModel {

    /** Type of road closure. Some example values:
            Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.
            Partial Closure = road is partially blocked, closed or restricted. 
            Full Closure = road is fully blocked or closed. */
    public var closure: String?

    /** The direction of the disruption on the street. Some example values:
            All Directions
            All Approaches
            Clockwise
            Anti-Clockwise
            Northbound
            Eastbound
            Southbound
            Westbound
            Both Directions */
    public var directions: String?

    /** Street name */
    public var name: String?

    /** Geographic description of the sections of this street that are affected. */
    public var segments: [EvenStreetSegment]?

    /** The ID from the source system of the disruption that this street belongs to. */
    public var sourceSystemId: Int?

    /** The key of the source system of the disruption that this street belongs to. */
    public var sourceSystemKey: String?

    public init(closure: String? = nil, directions: String? = nil, name: String? = nil, segments: [EvenStreetSegment]? = nil, sourceSystemId: Int? = nil, sourceSystemKey: String? = nil) {
        self.closure = closure
        self.directions = directions
        self.name = name
        self.segments = segments
        self.sourceSystemId = sourceSystemId
        self.sourceSystemKey = sourceSystemKey
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        closure = try container.decodeIfPresent("closure")
        directions = try container.decodeIfPresent("directions")
        name = try container.decodeIfPresent("name")
        segments = try container.decodeArrayIfPresent("segments")
        sourceSystemId = try container.decodeIfPresent("sourceSystemId")
        sourceSystemKey = try container.decodeIfPresent("sourceSystemKey")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(closure, forKey: "closure")
        try container.encodeIfPresent(directions, forKey: "directions")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(segments, forKey: "segments")
        try container.encodeIfPresent(sourceSystemId, forKey: "sourceSystemId")
        try container.encodeIfPresent(sourceSystemKey, forKey: "sourceSystemKey")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenStreet else { return false }
      guard self.closure == object.closure else { return false }
      guard self.directions == object.directions else { return false }
      guard self.name == object.name else { return false }
      guard self.segments == object.segments else { return false }
      guard self.sourceSystemId == object.sourceSystemId else { return false }
      guard self.sourceSystemKey == object.sourceSystemKey else { return false }
      return true
    }

    public static func == (lhs: EvenStreet, rhs: EvenStreet) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
