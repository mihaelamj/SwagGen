//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents a period for which a planned works is valid. */
public class EvenValidityPeriod: APIModel {

    /** Gets or sets the start date. */
    public var fromDate: DateTime?

    /** If true is a realtime status rather than planned or info */
    public var isNow: Bool?

    /** Gets or sets the end date. */
    public var toDate: DateTime?

    public init(fromDate: DateTime? = nil, isNow: Bool? = nil, toDate: DateTime? = nil) {
        self.fromDate = fromDate
        self.isNow = isNow
        self.toDate = toDate
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        fromDate = try container.decodeIfPresent("fromDate")
        isNow = try container.decodeIfPresent("isNow")
        toDate = try container.decodeIfPresent("toDate")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(fromDate, forKey: "fromDate")
        try container.encodeIfPresent(isNow, forKey: "isNow")
        try container.encodeIfPresent(toDate, forKey: "toDate")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenValidityPeriod else { return false }
      guard self.fromDate == object.fromDate else { return false }
      guard self.isNow == object.isNow else { return false }
      guard self.toDate == object.toDate else { return false }
      return true
    }

    public static func == (lhs: EvenValidityPeriod, rhs: EvenValidityPeriod) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
