//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenMatchedRoute: APIModel {

    /** eg: Destination */
    public var destination: String?

    /** eg: Destination Name */
    public var destinationName: String?

    /** eg: N or S or I or O */
    public var direction: String?

    /** Name such as "72" */
    public var name: String?

    /** eg: Origination Name */
    public var originationName: String?

    /** eg: Origination */
    public var originator: String?

    /** The route code */
    public var routeCode: String?

    /** eg: Regular, Night */
    public var serviceType: String?

    public init(destination: String? = nil, destinationName: String? = nil, direction: String? = nil, name: String? = nil, originationName: String? = nil, originator: String? = nil, routeCode: String? = nil, serviceType: String? = nil) {
        self.destination = destination
        self.destinationName = destinationName
        self.direction = direction
        self.name = name
        self.originationName = originationName
        self.originator = originator
        self.routeCode = routeCode
        self.serviceType = serviceType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        destination = try container.decodeIfPresent("destination")
        destinationName = try container.decodeIfPresent("destinationName")
        direction = try container.decodeIfPresent("direction")
        name = try container.decodeIfPresent("name")
        originationName = try container.decodeIfPresent("originationName")
        originator = try container.decodeIfPresent("originator")
        routeCode = try container.decodeIfPresent("routeCode")
        serviceType = try container.decodeIfPresent("serviceType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(destination, forKey: "destination")
        try container.encodeIfPresent(destinationName, forKey: "destinationName")
        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(originationName, forKey: "originationName")
        try container.encodeIfPresent(originator, forKey: "originator")
        try container.encodeIfPresent(routeCode, forKey: "routeCode")
        try container.encodeIfPresent(serviceType, forKey: "serviceType")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenMatchedRoute else { return false }
      guard self.destination == object.destination else { return false }
      guard self.destinationName == object.destinationName else { return false }
      guard self.direction == object.direction else { return false }
      guard self.name == object.name else { return false }
      guard self.originationName == object.originationName else { return false }
      guard self.originator == object.originator else { return false }
      guard self.routeCode == object.routeCode else { return false }
      guard self.serviceType == object.serviceType else { return false }
      return true
    }

    public static func == (lhs: EvenMatchedRoute, rhs: EvenMatchedRoute) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
