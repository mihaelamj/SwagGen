//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenTimetableResponse: APIModel {

    public var direction: String?

    public var disambiguation: EvenDisambiguation?

    public var lineId: String?

    public var lineName: String?

    public var pdfUrl: String?

    public var stations: [EvenMatchedStop]?

    public var statusErrorMessage: String?

    public var stops: [EvenMatchedStop]?

    public var timetable: EvenTimetable?

    public init(direction: String? = nil, disambiguation: EvenDisambiguation? = nil, lineId: String? = nil, lineName: String? = nil, pdfUrl: String? = nil, stations: [EvenMatchedStop]? = nil, statusErrorMessage: String? = nil, stops: [EvenMatchedStop]? = nil, timetable: EvenTimetable? = nil) {
        self.direction = direction
        self.disambiguation = disambiguation
        self.lineId = lineId
        self.lineName = lineName
        self.pdfUrl = pdfUrl
        self.stations = stations
        self.statusErrorMessage = statusErrorMessage
        self.stops = stops
        self.timetable = timetable
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        direction = try container.decodeIfPresent("direction")
        disambiguation = try container.decodeIfPresent("disambiguation")
        lineId = try container.decodeIfPresent("lineId")
        lineName = try container.decodeIfPresent("lineName")
        pdfUrl = try container.decodeIfPresent("pdfUrl")
        stations = try container.decodeArrayIfPresent("stations")
        statusErrorMessage = try container.decodeIfPresent("statusErrorMessage")
        stops = try container.decodeArrayIfPresent("stops")
        timetable = try container.decodeIfPresent("timetable")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(disambiguation, forKey: "disambiguation")
        try container.encodeIfPresent(lineId, forKey: "lineId")
        try container.encodeIfPresent(lineName, forKey: "lineName")
        try container.encodeIfPresent(pdfUrl, forKey: "pdfUrl")
        try container.encodeIfPresent(stations, forKey: "stations")
        try container.encodeIfPresent(statusErrorMessage, forKey: "statusErrorMessage")
        try container.encodeIfPresent(stops, forKey: "stops")
        try container.encodeIfPresent(timetable, forKey: "timetable")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenTimetableResponse else { return false }
      guard self.direction == object.direction else { return false }
      guard self.disambiguation == object.disambiguation else { return false }
      guard self.lineId == object.lineId else { return false }
      guard self.lineName == object.lineName else { return false }
      guard self.pdfUrl == object.pdfUrl else { return false }
      guard self.stations == object.stations else { return false }
      guard self.statusErrorMessage == object.statusErrorMessage else { return false }
      guard self.stops == object.stops else { return false }
      guard self.timetable == object.timetable else { return false }
      return true
    }

    public static func == (lhs: EvenTimetableResponse, rhs: EvenTimetableResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
