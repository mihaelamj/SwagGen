//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenTokenObject: APIModel {

    /** The Token ID */
    public var token: String

    public var idp: Idp

    /** The Token type */
    public var type: String

    public var expiration: DateTime?

    public var remainingCredits: Double?

    public var uses: Double?

    public class Idp: APIModel {

        public var code: String?

        public var description: String?

        public init(code: String? = nil, description: String? = nil) {
            self.code = code
            self.description = description
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            code = try container.decodeIfPresent("code")
            description = try container.decodeIfPresent("description")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(code, forKey: "code")
            try container.encodeIfPresent(description, forKey: "description")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Idp else { return false }
          guard self.code == object.code else { return false }
          guard self.description == object.description else { return false }
          return true
        }

        public static func == (lhs: Idp, rhs: Idp) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(token: String, idp: Idp, type: String, expiration: DateTime? = nil, remainingCredits: Double? = nil, uses: Double? = nil) {
        self.token = token
        self.idp = idp
        self.type = type
        self.expiration = expiration
        self.remainingCredits = remainingCredits
        self.uses = uses
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        token = try container.decode("token")
        idp = try container.decode("idp")
        type = try container.decode("type")
        expiration = try container.decodeIfPresent("expiration")
        remainingCredits = try container.decodeIfPresent("remainingCredits")
        uses = try container.decodeIfPresent("uses")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(token, forKey: "token")
        try container.encode(idp, forKey: "idp")
        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(expiration, forKey: "expiration")
        try container.encodeIfPresent(remainingCredits, forKey: "remainingCredits")
        try container.encodeIfPresent(uses, forKey: "uses")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenTokenObject else { return false }
      guard self.token == object.token else { return false }
      guard self.idp == object.idp else { return false }
      guard self.type == object.type else { return false }
      guard self.expiration == object.expiration else { return false }
      guard self.remainingCredits == object.remainingCredits else { return false }
      guard self.uses == object.uses else { return false }
      return true
    }

    public static func == (lhs: EvenTokenObject, rhs: EvenTokenObject) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
