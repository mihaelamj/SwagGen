//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenCustomer: APIModel {

    public var subscriberID: String

    public var banReason: String?

    public var banned: Bool?

    public var country: EvenObjectID?

    public var created: DateTime?

    public var hasNotDeviceLimit: Bool?

    public var id: EvenObjectID?

    public var identityProvider: EvenObjectID?

    public var lastLogin: DateTime?

    public var updated: DateTime?

    public init(subscriberID: String, banReason: String? = nil, banned: Bool? = nil, country: EvenObjectID? = nil, created: DateTime? = nil, hasNotDeviceLimit: Bool? = nil, id: EvenObjectID? = nil, identityProvider: EvenObjectID? = nil, lastLogin: DateTime? = nil, updated: DateTime? = nil) {
        self.subscriberID = subscriberID
        self.banReason = banReason
        self.banned = banned
        self.country = country
        self.created = created
        self.hasNotDeviceLimit = hasNotDeviceLimit
        self.id = id
        self.identityProvider = identityProvider
        self.lastLogin = lastLogin
        self.updated = updated
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        subscriberID = try container.decode("subscriberID")
        banReason = try container.decodeIfPresent("banReason")
        banned = try container.decodeIfPresent("banned")
        country = try container.decodeIfPresent("country")
        created = try container.decodeIfPresent("created")
        hasNotDeviceLimit = try container.decodeIfPresent("hasNotDeviceLimit")
        id = try container.decodeIfPresent("id")
        identityProvider = try container.decodeIfPresent("identityProvider")
        lastLogin = try container.decodeIfPresent("lastLogin")
        updated = try container.decodeIfPresent("updated")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(subscriberID, forKey: "subscriberID")
        try container.encodeIfPresent(banReason, forKey: "banReason")
        try container.encodeIfPresent(banned, forKey: "banned")
        try container.encodeIfPresent(country, forKey: "country")
        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(hasNotDeviceLimit, forKey: "hasNotDeviceLimit")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(identityProvider, forKey: "identityProvider")
        try container.encodeIfPresent(lastLogin, forKey: "lastLogin")
        try container.encodeIfPresent(updated, forKey: "updated")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenCustomer else { return false }
      guard self.subscriberID == object.subscriberID else { return false }
      guard self.banReason == object.banReason else { return false }
      guard self.banned == object.banned else { return false }
      guard self.country == object.country else { return false }
      guard self.created == object.created else { return false }
      guard self.hasNotDeviceLimit == object.hasNotDeviceLimit else { return false }
      guard self.id == object.id else { return false }
      guard self.identityProvider == object.identityProvider else { return false }
      guard self.lastLogin == object.lastLogin else { return false }
      guard self.updated == object.updated else { return false }
      return true
    }

    public static func == (lhs: EvenCustomer, rhs: EvenCustomer) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
