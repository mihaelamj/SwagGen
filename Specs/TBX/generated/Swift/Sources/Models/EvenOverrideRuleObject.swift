//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenOverrideRuleObject: APIModel {

    /** List of URNs to override */
    public var urn: [String]

    public var response: Bool

    public var priority: Double

    /** List of actions to override */
    public var action: [String]?

    /** List of countries to override */
    public var country: [String]?

    public var dateFrom: DateTime?

    public var dateUntil: DateTime?

    /** List of IDPs to override */
    public var idp: [String]?

    public init(urn: [String], response: Bool, priority: Double, action: [String]? = nil, country: [String]? = nil, dateFrom: DateTime? = nil, dateUntil: DateTime? = nil, idp: [String]? = nil) {
        self.urn = urn
        self.response = response
        self.priority = priority
        self.action = action
        self.country = country
        self.dateFrom = dateFrom
        self.dateUntil = dateUntil
        self.idp = idp
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        urn = try container.decodeArray("urn")
        response = try container.decode("response")
        priority = try container.decode("priority")
        action = try container.decodeArrayIfPresent("action")
        country = try container.decodeArrayIfPresent("country")
        dateFrom = try container.decodeIfPresent("dateFrom")
        dateUntil = try container.decodeIfPresent("dateUntil")
        idp = try container.decodeArrayIfPresent("idp")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(urn, forKey: "urn")
        try container.encode(response, forKey: "response")
        try container.encode(priority, forKey: "priority")
        try container.encodeIfPresent(action, forKey: "action")
        try container.encodeIfPresent(country, forKey: "country")
        try container.encodeIfPresent(dateFrom, forKey: "dateFrom")
        try container.encodeIfPresent(dateUntil, forKey: "dateUntil")
        try container.encodeIfPresent(idp, forKey: "idp")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenOverrideRuleObject else { return false }
      guard self.urn == object.urn else { return false }
      guard self.response == object.response else { return false }
      guard self.priority == object.priority else { return false }
      guard self.action == object.action else { return false }
      guard self.country == object.country else { return false }
      guard self.dateFrom == object.dateFrom else { return false }
      guard self.dateUntil == object.dateUntil else { return false }
      guard self.idp == object.idp else { return false }
      return true
    }

    public static func == (lhs: EvenOverrideRuleObject, rhs: EvenOverrideRuleObject) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
