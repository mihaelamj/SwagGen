//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenContentProvider: APIModel {

    public var description: String

    public var shortName: String

    public var active: Bool

    public var apiKey: String

    public var devicesLimit: Double

    public var canLogoutDevice: Bool

    public var canCreateTryAndBuy: Bool?

    public var hasSocialID: Bool?

    public var id: EvenObjectID?

    public var overrideRules: [EvenOverrideRuleObject]?

    public var permittedURN: [String]?

    public var urlMaintenance: String?

    public var whitelistDomains: [String]?

    public init(description: String, shortName: String, active: Bool, apiKey: String, devicesLimit: Double, canLogoutDevice: Bool, canCreateTryAndBuy: Bool? = nil, hasSocialID: Bool? = nil, id: EvenObjectID? = nil, overrideRules: [EvenOverrideRuleObject]? = nil, permittedURN: [String]? = nil, urlMaintenance: String? = nil, whitelistDomains: [String]? = nil) {
        self.description = description
        self.shortName = shortName
        self.active = active
        self.apiKey = apiKey
        self.devicesLimit = devicesLimit
        self.canLogoutDevice = canLogoutDevice
        self.canCreateTryAndBuy = canCreateTryAndBuy
        self.hasSocialID = hasSocialID
        self.id = id
        self.overrideRules = overrideRules
        self.permittedURN = permittedURN
        self.urlMaintenance = urlMaintenance
        self.whitelistDomains = whitelistDomains
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        description = try container.decode("description")
        shortName = try container.decode("shortName")
        active = try container.decode("active")
        apiKey = try container.decode("apiKey")
        devicesLimit = try container.decode("devicesLimit")
        canLogoutDevice = try container.decode("canLogoutDevice")
        canCreateTryAndBuy = try container.decodeIfPresent("canCreateTryAndBuy")
        hasSocialID = try container.decodeIfPresent("hasSocialID")
        id = try container.decodeIfPresent("id")
        overrideRules = try container.decodeArrayIfPresent("overrideRules")
        permittedURN = try container.decodeArrayIfPresent("permittedURN")
        urlMaintenance = try container.decodeIfPresent("urlMaintenance")
        whitelistDomains = try container.decodeArrayIfPresent("whitelistDomains")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(description, forKey: "description")
        try container.encode(shortName, forKey: "shortName")
        try container.encode(active, forKey: "active")
        try container.encode(apiKey, forKey: "apiKey")
        try container.encode(devicesLimit, forKey: "devicesLimit")
        try container.encode(canLogoutDevice, forKey: "canLogoutDevice")
        try container.encodeIfPresent(canCreateTryAndBuy, forKey: "canCreateTryAndBuy")
        try container.encodeIfPresent(hasSocialID, forKey: "hasSocialID")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(overrideRules, forKey: "overrideRules")
        try container.encodeIfPresent(permittedURN, forKey: "permittedURN")
        try container.encodeIfPresent(urlMaintenance, forKey: "urlMaintenance")
        try container.encodeIfPresent(whitelistDomains, forKey: "whitelistDomains")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenContentProvider else { return false }
      guard self.description == object.description else { return false }
      guard self.shortName == object.shortName else { return false }
      guard self.active == object.active else { return false }
      guard self.apiKey == object.apiKey else { return false }
      guard self.devicesLimit == object.devicesLimit else { return false }
      guard self.canLogoutDevice == object.canLogoutDevice else { return false }
      guard self.canCreateTryAndBuy == object.canCreateTryAndBuy else { return false }
      guard self.hasSocialID == object.hasSocialID else { return false }
      guard self.id == object.id else { return false }
      guard self.overrideRules == object.overrideRules else { return false }
      guard self.permittedURN == object.permittedURN else { return false }
      guard self.urlMaintenance == object.urlMaintenance else { return false }
      guard self.whitelistDomains == object.whitelistDomains else { return false }
      return true
    }

    public static func == (lhs: EvenContentProvider, rhs: EvenContentProvider) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
