//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.Even {

    /** createUpdateLeadAndGetRateTables */
    public enum CreateUpdateLeadAndGetRateTables {

        public static let service = APIService<Response>(id: "createUpdateLeadAndGetRateTables", tag: "Even", method: "POST", path: "/even/createUpdateLeadAndGetRateTables", hasBody: true, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public var body: EvenLeadRequestJson

            public init(body: EvenLeadRequestJson, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: CreateUpdateLeadAndGetRateTables.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = EvenGetRateTable

            /** Return `RateTable` for newly created lead */
            case status200(EvenGetRateTable)

            /** Internal server error */
            case status500(EvenApiError)

            public var success: EvenGetRateTable? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: EvenApiError? {
                switch self {
                case .status500(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<EvenGetRateTable, EvenApiError> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status500(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status500: return 500
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status500: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(EvenGetRateTable.self, from: data))
                case 500: self = try .status500(decoder.decode(EvenApiError.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
