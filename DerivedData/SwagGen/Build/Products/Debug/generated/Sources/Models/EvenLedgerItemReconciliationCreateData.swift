//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenLedgerItemReconciliationCreateData: BirchModel, Decodable, AutoEquatable {

    public var ledgerItemIds: [Int]

    public var reconciliationType: EvenReconciliationType

    public var memo: String

    public init(ledgerItemIds: [Int], reconciliationType: EvenReconciliationType, memo: String) {
        self.ledgerItemIds = ledgerItemIds
        self.reconciliationType = reconciliationType
        self.memo = memo
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        ledgerItemIds = try container.decodeArray("ledgerItemIds")
        reconciliationType = try container.decode("reconciliationType")
        memo = try container.decode("memo")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(ledgerItemIds, forKey: "ledgerItemIds")
        try container.encode(reconciliationType, forKey: "reconciliationType")
        try container.encode(memo, forKey: "memo")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenLedgerItemReconciliationCreateData else { return false }
      guard self.ledgerItemIds == object.ledgerItemIds else { return false }
      guard self.reconciliationType == object.reconciliationType else { return false }
      guard self.memo == object.memo else { return false }
      return true
    }

    public static func == (lhs: EvenLedgerItemReconciliationCreateData, rhs: EvenLedgerItemReconciliationCreateData) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
