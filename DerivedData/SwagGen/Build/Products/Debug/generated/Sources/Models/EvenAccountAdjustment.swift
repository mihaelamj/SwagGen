//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenAccountAdjustment: BirchModel, Decodable, AutoEquatable {

    public enum EvenAdjustmentReason: String, Codable, Equatable, CaseIterable {
        case monthlyTenPercent = "monthly_ten_percent"
        case customerReporting = "customer_reporting"
        case savingsRevenue = "savings_revenue"
        case creditCardRevenue = "credit_card_revenue"
        case emailRevenue = "email_revenue"
        case preReported = "pre_reported"
        case promotional = "promotional"
        case leadTestingAdjustment = "lead_testing_adjustment"
        case other = "other"
        case unknown = "unknown"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenAdjustmentReason(rawValue: rawValue) ?? .undecodable
        }
    }

    public var id: Int

    public var accountId: Int

    public var amount: Double

    public var adjustmentReason: EvenAdjustmentReason

    public var createdAt: DateTime

    public var createdBy: ID

    public var deletedAt: DateTime?

    public var deletedBy: ID?

    public var ledgerItemId: Int?

    public var memo: String?

    public init(id: Int, accountId: Int, amount: Double, adjustmentReason: EvenAdjustmentReason, createdAt: DateTime, createdBy: ID, deletedAt: DateTime? = nil, deletedBy: ID? = nil, ledgerItemId: Int? = nil, memo: String? = nil) {
        self.id = id
        self.accountId = accountId
        self.amount = amount
        self.adjustmentReason = adjustmentReason
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.deletedAt = deletedAt
        self.deletedBy = deletedBy
        self.ledgerItemId = ledgerItemId
        self.memo = memo
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        accountId = try container.decode("accountId")
        amount = try container.decode("amount")
        adjustmentReason = try container.decode("adjustmentReason")
        createdAt = try container.decode("createdAt")
        createdBy = try container.decode("createdBy")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedBy = try container.decodeIfPresent("deletedBy")
        ledgerItemId = try container.decodeIfPresent("ledgerItemId")
        memo = try container.decodeIfPresent("memo")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(accountId, forKey: "accountId")
        try container.encode(amount, forKey: "amount")
        try container.encode(adjustmentReason, forKey: "adjustmentReason")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedBy, forKey: "deletedBy")
        try container.encodeIfPresent(ledgerItemId, forKey: "ledgerItemId")
        try container.encodeIfPresent(memo, forKey: "memo")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenAccountAdjustment else { return false }
      guard self.id == object.id else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.amount == object.amount else { return false }
      guard self.adjustmentReason == object.adjustmentReason else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedBy == object.deletedBy else { return false }
      guard self.ledgerItemId == object.ledgerItemId else { return false }
      guard self.memo == object.memo else { return false }
      return true
    }

    public static func == (lhs: EvenAccountAdjustment, rhs: EvenAccountAdjustment) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
