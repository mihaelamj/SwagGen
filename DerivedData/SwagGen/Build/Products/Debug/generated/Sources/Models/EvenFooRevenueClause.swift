//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public enum EvenFooRevenueClause: Codable, Equatable {
    case costPerCreditCardApprovedRevenueClause(EvenCostPerCreditCardApprovedRevenueClause)
    case costPerCreditCardOpenedRevenueClause(EvenCostPerCreditCardOpenedRevenueClause)
    case costPerLoanApprovedRevenueClause(EvenCostPerLoanApprovedRevenueClause)
    case costPerLoanFundedRevenueClause(EvenCostPerLoanFundedRevenueClause)
    case costPerSavingsFundedRevenueClause(EvenCostPerSavingsFundedRevenueClause)
    case costPerSavingsOfferClickedRevenueClause(EvenCostPerSavingsOfferClickedRevenueClause)
    case costPerSavingsOpenedRevenueClause(EvenCostPerSavingsOpenedRevenueClause)
    case otherRevenueRevenueClause(EvenOtherRevenueRevenueClause)
    case percentGrossFundedLoanAmountRevenueClause(EvenPercentGrossFundedLoanAmountRevenueClause)
    case percentOriginationFeeRevenueClause(EvenPercentOriginationFeeRevenueClause)
    case undecodable

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)
        let discriminator: String = try container.decode("key")
        switch discriminator {
        case "CostPerCreditCardApprovedRevenueClause":
            self = .costPerCreditCardApprovedRevenueClause(try EvenCostPerCreditCardApprovedRevenueClause(from: decoder))
        case "CostPerCreditCardOpenedRevenueClause":
            self = .costPerCreditCardOpenedRevenueClause(try EvenCostPerCreditCardOpenedRevenueClause(from: decoder))
        case "CostPerLoanApprovedRevenueClause":
            self = .costPerLoanApprovedRevenueClause(try EvenCostPerLoanApprovedRevenueClause(from: decoder))
        case "CostPerLoanFundedRevenueClause":
            self = .costPerLoanFundedRevenueClause(try EvenCostPerLoanFundedRevenueClause(from: decoder))
        case "CostPerSavingsFundedRevenueClause":
            self = .costPerSavingsFundedRevenueClause(try EvenCostPerSavingsFundedRevenueClause(from: decoder))
        case "CostPerSavingsOfferClickedRevenueClause":
            self = .costPerSavingsOfferClickedRevenueClause(try EvenCostPerSavingsOfferClickedRevenueClause(from: decoder))
        case "CostPerSavingsOpenedRevenueClause":
            self = .costPerSavingsOpenedRevenueClause(try EvenCostPerSavingsOpenedRevenueClause(from: decoder))
        case "OtherRevenueRevenueClause":
            self = .otherRevenueRevenueClause(try EvenOtherRevenueRevenueClause(from: decoder))
        case "PercentGrossFundedLoanAmountRevenueClause":
            self = .percentGrossFundedLoanAmountRevenueClause(try EvenPercentGrossFundedLoanAmountRevenueClause(from: decoder))
        case "PercentOriginationFeeRevenueClause":
            self = .percentOriginationFeeRevenueClause(try EvenPercentOriginationFeeRevenueClause(from: decoder))
        case "cost_per_credit_card/approved":
            self = .costPerCreditCardApprovedRevenueClause(try EvenCostPerCreditCardApprovedRevenueClause(from: decoder))
        case "cost_per_credit_card/opened":
            self = .costPerCreditCardOpenedRevenueClause(try EvenCostPerCreditCardOpenedRevenueClause(from: decoder))
        case "cost_per_loan/approved":
            self = .costPerLoanApprovedRevenueClause(try EvenCostPerLoanApprovedRevenueClause(from: decoder))
        case "cost_per_loan/funded":
            self = .costPerLoanFundedRevenueClause(try EvenCostPerLoanFundedRevenueClause(from: decoder))
        case "cost_per_savings/funded":
            self = .costPerSavingsFundedRevenueClause(try EvenCostPerSavingsFundedRevenueClause(from: decoder))
        case "cost_per_savings/offer_clicked":
            self = .costPerSavingsOfferClickedRevenueClause(try EvenCostPerSavingsOfferClickedRevenueClause(from: decoder))
        case "cost_per_savings/opened":
            self = .costPerSavingsOpenedRevenueClause(try EvenCostPerSavingsOpenedRevenueClause(from: decoder))
        case "other_revenue":
            self = .otherRevenueRevenueClause(try EvenOtherRevenueRevenueClause(from: decoder))
        case "percent_gross_funded_loan_amount":
            self = .percentGrossFundedLoanAmountRevenueClause(try EvenPercentGrossFundedLoanAmountRevenueClause(from: decoder))
        case "percent_origination_fee":
            self = .percentOriginationFeeRevenueClause(try EvenPercentOriginationFeeRevenueClause(from: decoder))
        default:
            self = .undecodable
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .costPerCreditCardApprovedRevenueClause(let content):
            try container.encode(content)
        case .costPerCreditCardOpenedRevenueClause(let content):
            try container.encode(content)
        case .costPerLoanApprovedRevenueClause(let content):
            try container.encode(content)
        case .costPerLoanFundedRevenueClause(let content):
            try container.encode(content)
        case .costPerSavingsFundedRevenueClause(let content):
            try container.encode(content)
        case .costPerSavingsOfferClickedRevenueClause(let content):
            try container.encode(content)
        case .costPerSavingsOpenedRevenueClause(let content):
            try container.encode(content)
        case .otherRevenueRevenueClause(let content):
            try container.encode(content)
        case .percentGrossFundedLoanAmountRevenueClause(let content):
            try container.encode(content)
        case .percentOriginationFeeRevenueClause(let content):
            try container.encode(content)
        case .undecodable:
            try container.encode("undecodable")
        }
    }
}
