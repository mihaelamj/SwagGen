//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenProcessorInformation: BirchModel, Decodable, AutoEquatable {

    public enum EvenExtractorType: String, Codable, Equatable, CaseIterable {
        case conditionalTwoColumnValueEqualNot = "conditional_two_column_value_equal_not"
        case conditionalColumnValue = "conditional_column_value"
        case doubleConditionalColumnValue = "double_conditional_column_value"
        case jsonString = "json_string"
        case prefixedKeyValue = "prefixed_key_value"
        case noOp = "no_op"
        case simpleColumn = "simple_column"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenExtractorType(rawValue: rawValue) ?? .undecodable
        }
    }

    public enum EvenTransformerTypes: String, Codable, Equatable, CaseIterable {
        case addIntToValue = "add_int_to_value"
        case excelTimestamp = "excel_timestamp"
        case noOp = "no_op"
        case stripPrefix = "strip_prefix"
        case stripSuffix = "strip_suffix"
        case timestamp = "timestamp"
        case uuid = "uuid"
        case isNotNull = "is_not_null"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenTransformerTypes(rawValue: rawValue) ?? .undecodable
        }
    }

    public var extractorType: EvenExtractorType

    public var extractorArguments: [String]

    public var transformerTypes: [EvenTransformerTypes]

    public var transformerArguments: [String]

    public init(extractorType: EvenExtractorType, extractorArguments: [String], transformerTypes: [EvenTransformerTypes], transformerArguments: [String]) {
        self.extractorType = extractorType
        self.extractorArguments = extractorArguments
        self.transformerTypes = transformerTypes
        self.transformerArguments = transformerArguments
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        extractorType = try container.decode("extractorType")
        extractorArguments = try container.decodeArray("extractorArguments")
        transformerTypes = try container.decodeArray("transformerTypes")
        transformerArguments = try container.decodeArray("transformerArguments")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(extractorType, forKey: "extractorType")
        try container.encode(extractorArguments, forKey: "extractorArguments")
        try container.encode(transformerTypes, forKey: "transformerTypes")
        try container.encode(transformerArguments, forKey: "transformerArguments")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenProcessorInformation else { return false }
      guard self.extractorType == object.extractorType else { return false }
      guard self.extractorArguments == object.extractorArguments else { return false }
      guard self.transformerTypes == object.transformerTypes else { return false }
      guard self.transformerArguments == object.transformerArguments else { return false }
      return true
    }

    public static func == (lhs: EvenProcessorInformation, rhs: EvenProcessorInformation) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
