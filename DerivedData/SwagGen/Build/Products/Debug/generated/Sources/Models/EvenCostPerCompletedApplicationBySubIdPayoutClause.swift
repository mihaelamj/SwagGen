//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenCostPerCompletedApplicationBySubIdPayoutClause: BirchModel, Decodable, AutoEquatable {

    public var defaultCost: Double

    public var subIdKey: String

    public var costPerValue: [CostPerValue]

    public class CostPerValue: BirchModel, Decodable, AutoEquatable {

        public var key: String

        public var value: Double

        public init(key: String, value: Double) {
            self.key = key
            self.value = value
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            key = try container.decode("key")
            value = try container.decode("value")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(key, forKey: "key")
            try container.encode(value, forKey: "value")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? CostPerValue else { return false }
          guard self.key == object.key else { return false }
          guard self.value == object.value else { return false }
          return true
        }

        public static func == (lhs: CostPerValue, rhs: CostPerValue) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(defaultCost: Double, subIdKey: String, costPerValue: [CostPerValue]) {
        self.defaultCost = defaultCost
        self.subIdKey = subIdKey
        self.costPerValue = costPerValue
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        defaultCost = try container.decode("defaultCost")
        subIdKey = try container.decode("subIdKey")
        costPerValue = try container.decodeArray("costPerValue")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(defaultCost, forKey: "defaultCost")
        try container.encode(subIdKey, forKey: "subIdKey")
        try container.encode(costPerValue, forKey: "costPerValue")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenCostPerCompletedApplicationBySubIdPayoutClause else { return false }
      guard self.defaultCost == object.defaultCost else { return false }
      guard self.subIdKey == object.subIdKey else { return false }
      guard self.costPerValue == object.costPerValue else { return false }
      return true
    }

    public static func == (lhs: EvenCostPerCompletedApplicationBySubIdPayoutClause, rhs: EvenCostPerCompletedApplicationBySubIdPayoutClause) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
