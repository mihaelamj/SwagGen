//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenLedgerItemSettlement: BirchModel, Decodable, AutoEquatable {

    public enum EvenStatus: String, Codable, Equatable, CaseIterable {
        case pending = "pending"
        case started = "started"
        case success = "success"
        case skipped = "skipped"
        case error = "error"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenStatus(rawValue: rawValue) ?? .undecodable
        }
    }

    /** A unique, internal identifier for this resource.
 */
    public var id: Int

    public var accountId: Int

    public var status: EvenStatus

    /** When the resource was created.
 */
    public var createdAt: DateTime

    /** The UUID of the access token that was used to create this resource.
 */
    public var createdBy: ID

    public var completedAt: DateTime?

    public var error: String?

    public var ledgerItemId: Int?

    public var startedAt: DateTime?

    public init(id: Int, accountId: Int, status: EvenStatus, createdAt: DateTime, createdBy: ID, completedAt: DateTime? = nil, error: String? = nil, ledgerItemId: Int? = nil, startedAt: DateTime? = nil) {
        self.id = id
        self.accountId = accountId
        self.status = status
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.completedAt = completedAt
        self.error = error
        self.ledgerItemId = ledgerItemId
        self.startedAt = startedAt
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        accountId = try container.decode("accountId")
        status = try container.decode("status")
        createdAt = try container.decode("createdAt")
        createdBy = try container.decode("createdBy")
        completedAt = try container.decodeIfPresent("completedAt")
        error = try container.decodeIfPresent("error")
        ledgerItemId = try container.decodeIfPresent("ledgerItemId")
        startedAt = try container.decodeIfPresent("startedAt")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(accountId, forKey: "accountId")
        try container.encode(status, forKey: "status")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(completedAt, forKey: "completedAt")
        try container.encodeIfPresent(error, forKey: "error")
        try container.encodeIfPresent(ledgerItemId, forKey: "ledgerItemId")
        try container.encodeIfPresent(startedAt, forKey: "startedAt")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenLedgerItemSettlement else { return false }
      guard self.id == object.id else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.status == object.status else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.completedAt == object.completedAt else { return false }
      guard self.error == object.error else { return false }
      guard self.ledgerItemId == object.ledgerItemId else { return false }
      guard self.startedAt == object.startedAt else { return false }
      return true
    }

    public static func == (lhs: EvenLedgerItemSettlement, rhs: EvenLedgerItemSettlement) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
