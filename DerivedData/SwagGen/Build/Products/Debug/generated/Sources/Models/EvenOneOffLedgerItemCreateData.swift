//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenOneOffLedgerItemCreateData: BirchModel, Decodable, AutoEquatable {

    public var accountId: Int

    public var amount: Double

    public var startDate: DateDay

    public var endDate: DateDay

    public var dueDate: DateDay

    public var memo: String?

    public init(accountId: Int, amount: Double, startDate: DateDay, endDate: DateDay, dueDate: DateDay, memo: String? = nil) {
        self.accountId = accountId
        self.amount = amount
        self.startDate = startDate
        self.endDate = endDate
        self.dueDate = dueDate
        self.memo = memo
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        accountId = try container.decode("accountId")
        amount = try container.decode("amount")
        startDate = try container.decode("startDate")
        endDate = try container.decode("endDate")
        dueDate = try container.decode("dueDate")
        memo = try container.decodeIfPresent("memo")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(accountId, forKey: "accountId")
        try container.encode(amount, forKey: "amount")
        try container.encode(startDate, forKey: "startDate")
        try container.encode(endDate, forKey: "endDate")
        try container.encode(dueDate, forKey: "dueDate")
        try container.encodeIfPresent(memo, forKey: "memo")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenOneOffLedgerItemCreateData else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.amount == object.amount else { return false }
      guard self.startDate == object.startDate else { return false }
      guard self.endDate == object.endDate else { return false }
      guard self.dueDate == object.dueDate else { return false }
      guard self.memo == object.memo else { return false }
      return true
    }

    public static func == (lhs: EvenOneOffLedgerItemCreateData, rhs: EvenOneOffLedgerItemCreateData) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
