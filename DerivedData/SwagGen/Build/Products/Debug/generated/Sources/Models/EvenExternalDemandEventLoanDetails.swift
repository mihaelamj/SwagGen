//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenExternalDemandEventLoanDetails: BirchModel, Decodable, AutoEquatable {

    public var amount: Float?

    public var approvedLoanApr: Float?

    public var approvedLoanMinimum36MonthApr: Float?

    public var approvedLoanMinimum60MonthApr: Float?

    public var approvedLoanTerm: Int?

    public var fundedLoanApr: Float?

    public var fundedLoanTerm: Int?

    public var isCoApplicant: Bool?

    public var listedLoanApr: Float?

    public var listedLoanTerm: Int?

    public var originationFee: Float?

    public init(amount: Float? = nil, approvedLoanApr: Float? = nil, approvedLoanMinimum36MonthApr: Float? = nil, approvedLoanMinimum60MonthApr: Float? = nil, approvedLoanTerm: Int? = nil, fundedLoanApr: Float? = nil, fundedLoanTerm: Int? = nil, isCoApplicant: Bool? = nil, listedLoanApr: Float? = nil, listedLoanTerm: Int? = nil, originationFee: Float? = nil) {
        self.amount = amount
        self.approvedLoanApr = approvedLoanApr
        self.approvedLoanMinimum36MonthApr = approvedLoanMinimum36MonthApr
        self.approvedLoanMinimum60MonthApr = approvedLoanMinimum60MonthApr
        self.approvedLoanTerm = approvedLoanTerm
        self.fundedLoanApr = fundedLoanApr
        self.fundedLoanTerm = fundedLoanTerm
        self.isCoApplicant = isCoApplicant
        self.listedLoanApr = listedLoanApr
        self.listedLoanTerm = listedLoanTerm
        self.originationFee = originationFee
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        amount = try container.decodeIfPresent("amount")
        approvedLoanApr = try container.decodeIfPresent("approvedLoanApr")
        approvedLoanMinimum36MonthApr = try container.decodeIfPresent("approvedLoanMinimum36MonthApr")
        approvedLoanMinimum60MonthApr = try container.decodeIfPresent("approvedLoanMinimum60MonthApr")
        approvedLoanTerm = try container.decodeIfPresent("approvedLoanTerm")
        fundedLoanApr = try container.decodeIfPresent("fundedLoanApr")
        fundedLoanTerm = try container.decodeIfPresent("fundedLoanTerm")
        isCoApplicant = try container.decodeIfPresent("isCoApplicant")
        listedLoanApr = try container.decodeIfPresent("listedLoanApr")
        listedLoanTerm = try container.decodeIfPresent("listedLoanTerm")
        originationFee = try container.decodeIfPresent("originationFee")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(approvedLoanApr, forKey: "approvedLoanApr")
        try container.encodeIfPresent(approvedLoanMinimum36MonthApr, forKey: "approvedLoanMinimum36MonthApr")
        try container.encodeIfPresent(approvedLoanMinimum60MonthApr, forKey: "approvedLoanMinimum60MonthApr")
        try container.encodeIfPresent(approvedLoanTerm, forKey: "approvedLoanTerm")
        try container.encodeIfPresent(fundedLoanApr, forKey: "fundedLoanApr")
        try container.encodeIfPresent(fundedLoanTerm, forKey: "fundedLoanTerm")
        try container.encodeIfPresent(isCoApplicant, forKey: "isCoApplicant")
        try container.encodeIfPresent(listedLoanApr, forKey: "listedLoanApr")
        try container.encodeIfPresent(listedLoanTerm, forKey: "listedLoanTerm")
        try container.encodeIfPresent(originationFee, forKey: "originationFee")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenExternalDemandEventLoanDetails else { return false }
      guard self.amount == object.amount else { return false }
      guard self.approvedLoanApr == object.approvedLoanApr else { return false }
      guard self.approvedLoanMinimum36MonthApr == object.approvedLoanMinimum36MonthApr else { return false }
      guard self.approvedLoanMinimum60MonthApr == object.approvedLoanMinimum60MonthApr else { return false }
      guard self.approvedLoanTerm == object.approvedLoanTerm else { return false }
      guard self.fundedLoanApr == object.fundedLoanApr else { return false }
      guard self.fundedLoanTerm == object.fundedLoanTerm else { return false }
      guard self.isCoApplicant == object.isCoApplicant else { return false }
      guard self.listedLoanApr == object.listedLoanApr else { return false }
      guard self.listedLoanTerm == object.listedLoanTerm else { return false }
      guard self.originationFee == object.originationFee else { return false }
      return true
    }

    public static func == (lhs: EvenExternalDemandEventLoanDetails, rhs: EvenExternalDemandEventLoanDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
