//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenSubAccountUpdateData: BirchModel, Decodable, AutoEquatable {

    public var name: String

    public var displayName: String

    public var description: String?

    public var disclaimer: String?

    public var imageUrl: String?

    public var notes: String?

    public var productType: String?

    /** Override the default auto-generated call to action subtext for issuers */
    public var subtextOverride: String?

    public init(name: String, displayName: String, description: String? = nil, disclaimer: String? = nil, imageUrl: String? = nil, notes: String? = nil, productType: String? = nil, subtextOverride: String? = nil) {
        self.name = name
        self.displayName = displayName
        self.description = description
        self.disclaimer = disclaimer
        self.imageUrl = imageUrl
        self.notes = notes
        self.productType = productType
        self.subtextOverride = subtextOverride
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        name = try container.decode("name")
        displayName = try container.decode("displayName")
        description = try container.decodeIfPresent("description")
        disclaimer = try container.decodeIfPresent("disclaimer")
        imageUrl = try container.decodeIfPresent("imageUrl")
        notes = try container.decodeIfPresent("notes")
        productType = try container.decodeIfPresent("productType")
        subtextOverride = try container.decodeIfPresent("subtextOverride")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(name, forKey: "name")
        try container.encode(displayName, forKey: "displayName")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(disclaimer, forKey: "disclaimer")
        try container.encodeIfPresent(imageUrl, forKey: "imageUrl")
        try container.encodeIfPresent(notes, forKey: "notes")
        try container.encodeIfPresent(productType, forKey: "productType")
        try container.encodeIfPresent(subtextOverride, forKey: "subtextOverride")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenSubAccountUpdateData else { return false }
      guard self.name == object.name else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.description == object.description else { return false }
      guard self.disclaimer == object.disclaimer else { return false }
      guard self.imageUrl == object.imageUrl else { return false }
      guard self.notes == object.notes else { return false }
      guard self.productType == object.productType else { return false }
      guard self.subtextOverride == object.subtextOverride else { return false }
      return true
    }

    public static func == (lhs: EvenSubAccountUpdateData, rhs: EvenSubAccountUpdateData) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
