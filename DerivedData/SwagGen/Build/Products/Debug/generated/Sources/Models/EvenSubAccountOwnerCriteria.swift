//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenSubAccountOwnerCriteria: BirchModel, Decodable, AutoEquatable {

    /** Maximum bound for a date-time range to search over Creation time */
    public var subAccountOwnerCreatedAtMax: DateTime?

    /** Minimum bound for a date-time range to search over Creation time */
    public var subAccountOwnerCreatedAtMin: DateTime?

    /** Uuids of people who created Sub Account Owner objects */
    public var subAccountOwnerCreatedBy: [ID]?

    /** Maximum bound for a date-time range to search over Deletion time */
    public var subAccountOwnerDeletedAtMax: DateTime?

    /** Minimum bound for a date-time range to search over Deletion time */
    public var subAccountOwnerDeletedAtMin: DateTime?

    /** Uuids of people who deleted Sub Account Owner objects */
    public var subAccountOwnerDeletedBy: [ID]?

    /** Ids of Sub Account Owners */
    public var subAccountOwnerId: [Int]?

    /** Flag to include or exclude deleted records of Sub Account Owners */
    public var subAccountOwnerIsDeleted: Bool?

    public init(subAccountOwnerCreatedAtMax: DateTime? = nil, subAccountOwnerCreatedAtMin: DateTime? = nil, subAccountOwnerCreatedBy: [ID]? = nil, subAccountOwnerDeletedAtMax: DateTime? = nil, subAccountOwnerDeletedAtMin: DateTime? = nil, subAccountOwnerDeletedBy: [ID]? = nil, subAccountOwnerId: [Int]? = nil, subAccountOwnerIsDeleted: Bool? = nil) {
        self.subAccountOwnerCreatedAtMax = subAccountOwnerCreatedAtMax
        self.subAccountOwnerCreatedAtMin = subAccountOwnerCreatedAtMin
        self.subAccountOwnerCreatedBy = subAccountOwnerCreatedBy
        self.subAccountOwnerDeletedAtMax = subAccountOwnerDeletedAtMax
        self.subAccountOwnerDeletedAtMin = subAccountOwnerDeletedAtMin
        self.subAccountOwnerDeletedBy = subAccountOwnerDeletedBy
        self.subAccountOwnerId = subAccountOwnerId
        self.subAccountOwnerIsDeleted = subAccountOwnerIsDeleted
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        subAccountOwnerCreatedAtMax = try container.decodeIfPresent("subAccountOwnerCreatedAtMax")
        subAccountOwnerCreatedAtMin = try container.decodeIfPresent("subAccountOwnerCreatedAtMin")
        subAccountOwnerCreatedBy = try container.decodeArrayIfPresent("subAccountOwnerCreatedBy")
        subAccountOwnerDeletedAtMax = try container.decodeIfPresent("subAccountOwnerDeletedAtMax")
        subAccountOwnerDeletedAtMin = try container.decodeIfPresent("subAccountOwnerDeletedAtMin")
        subAccountOwnerDeletedBy = try container.decodeArrayIfPresent("subAccountOwnerDeletedBy")
        subAccountOwnerId = try container.decodeArrayIfPresent("subAccountOwnerId")
        subAccountOwnerIsDeleted = try container.decodeIfPresent("subAccountOwnerIsDeleted")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(subAccountOwnerCreatedAtMax, forKey: "subAccountOwnerCreatedAtMax")
        try container.encodeIfPresent(subAccountOwnerCreatedAtMin, forKey: "subAccountOwnerCreatedAtMin")
        try container.encodeIfPresent(subAccountOwnerCreatedBy, forKey: "subAccountOwnerCreatedBy")
        try container.encodeIfPresent(subAccountOwnerDeletedAtMax, forKey: "subAccountOwnerDeletedAtMax")
        try container.encodeIfPresent(subAccountOwnerDeletedAtMin, forKey: "subAccountOwnerDeletedAtMin")
        try container.encodeIfPresent(subAccountOwnerDeletedBy, forKey: "subAccountOwnerDeletedBy")
        try container.encodeIfPresent(subAccountOwnerId, forKey: "subAccountOwnerId")
        try container.encodeIfPresent(subAccountOwnerIsDeleted, forKey: "subAccountOwnerIsDeleted")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenSubAccountOwnerCriteria else { return false }
      guard self.subAccountOwnerCreatedAtMax == object.subAccountOwnerCreatedAtMax else { return false }
      guard self.subAccountOwnerCreatedAtMin == object.subAccountOwnerCreatedAtMin else { return false }
      guard self.subAccountOwnerCreatedBy == object.subAccountOwnerCreatedBy else { return false }
      guard self.subAccountOwnerDeletedAtMax == object.subAccountOwnerDeletedAtMax else { return false }
      guard self.subAccountOwnerDeletedAtMin == object.subAccountOwnerDeletedAtMin else { return false }
      guard self.subAccountOwnerDeletedBy == object.subAccountOwnerDeletedBy else { return false }
      guard self.subAccountOwnerId == object.subAccountOwnerId else { return false }
      guard self.subAccountOwnerIsDeleted == object.subAccountOwnerIsDeleted else { return false }
      return true
    }

    public static func == (lhs: EvenSubAccountOwnerCriteria, rhs: EvenSubAccountOwnerCriteria) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
