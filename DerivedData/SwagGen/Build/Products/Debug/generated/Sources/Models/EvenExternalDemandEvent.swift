//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenExternalDemandEvent: BirchModel, Decodable, AutoEquatable {

    public enum EvenEventType: String, Codable, Equatable, CaseIterable {
        case creditCardapplied = "credit_card/applied"
        case creditCardapproved = "credit_card/approved"
        case creditCardfunded = "credit_card/funded"
        case creditCardissuerPreQualificationApplication = "credit_card/issuer_pre_qualification_application"
        case creditCardissuerPreQualificationApplicationApproval = "credit_card/issuer_pre_qualification_application_approval"
        case creditCardopened = "credit_card/opened"
        case creditCardrejected = "credit_card/rejected"
        case lifeInsuranceapplied = "life_insurance/applied"
        case lifeInsuranceapproved = "life_insurance/approved"
        case lifeInsurancecarrierAdjustment = "life_insurance/carrier_adjustment"
        case lifeInsurancecarrierPayment = "life_insurance/carrier_payment"
        case lifeInsurancepolicyAdjustment = "life_insurance/policy_adjustment"
        case lifeInsurancepolicyBonusPayment = "life_insurance/policy_bonus_payment"
        case lifeInsurancepolicyChargeBack = "life_insurance/policy_charge_back"
        case lifeInsurancepolicyInForce = "life_insurance/policy_in_force"
        case lifeInsurancepolicyPayment = "life_insurance/policy_payment"
        case loanapplied = "loan/applied"
        case loanapproved = "loan/approved"
        case loanfunded = "loan/funded"
        case loanlisted = "loan/listed"
        case loanlistingNotFunded = "loan/listing_not_funded"
        case loanrejected = "loan/rejected"
        case mortgageapplied = "mortgage/applied"
        case mortgageapproved = "mortgage/approved"
        case mortgagefunded = "mortgage/funded"
        case mortgagerejected = "mortgage/rejected"
        case savingsapplied = "savings/applied"
        case savingsfunded = "savings/funded"
        case savingsmobileApplicationInstalled = "savings/mobile_application_installed"
        case savingsmobileApplicationBankLinked = "savings/mobile_application_bank_linked"
        case savingsofferClicked = "savings/offer_clicked"
        case savingsopened = "savings/opened"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenEventType(rawValue: rawValue) ?? .undecodable
        }
    }

    /** A type of financial product */
    public enum EvenProductSubType: String, Codable, Equatable, CaseIterable {
        case creditCard = "credit_card"
        case securedCard = "secured_card"
        case personalLoan = "personal_loan"
        case studentLoanRefinance = "student_loan_refinance"
        case coApplicantLoan = "co_applicant_loan"
        case lineOfCredit = "line_of_credit"
        case purchase = "purchase"
        case refinance = "refinance"
        case savingsAccount = "savings_account"
        case moneyMarketAccount = "money_market_account"
        case certificateOfDeposit = "certificate_of_deposit"
        case individualRetirementAccount = "individual_retirement_account"
        case cashManagementAccount = "cash_management_account"
        case highInterestChecking = "high_interest_checking"
        case accidentalDeathBenefits = "accidental_death_benefits"
        case termLife = "term_life"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenProductSubType(rawValue: rawValue) ?? .undecodable
        }
    }

    /** A unique, internal identifier for this resource.
 */
    public var id: Int

    public var subAccountId: Int

    public var leadUuid: ID

    public var eventType: EvenEventType

    public var timestamp: DateTime

    /** When the external demand event was created.
 */
    public var createdAt: DateTime

    /** The UUID of the access token that was used to create this external demand event.
 */
    public var createdByUuid: ID?

    /** When the external demand event was deleted.
 */
    public var deletedAt: DateTime?

    /** The UUID of the access token that was used to delete this external demand event.
 */
    public var deletedByUuid: ID?

    public var details: Details?

    public var offerId: Int?

    public var partnerTrackingId: Int?

    /** A type of financial product */
    public var productSubType: EvenProductSubType?

    public class Details: BirchModel, Decodable, AutoEquatable {

        public var edeDetailsKey: String

        public init(edeDetailsKey: String) {
            self.edeDetailsKey = edeDetailsKey
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            edeDetailsKey = try container.decode("edeDetailsKey")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(edeDetailsKey, forKey: "edeDetailsKey")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Details else { return false }
          guard self.edeDetailsKey == object.edeDetailsKey else { return false }
          return true
        }

        public static func == (lhs: Details, rhs: Details) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(id: Int, subAccountId: Int, leadUuid: ID, eventType: EvenEventType, timestamp: DateTime, createdAt: DateTime, createdByUuid: ID? = nil, deletedAt: DateTime? = nil, deletedByUuid: ID? = nil, details: Details? = nil, offerId: Int? = nil, partnerTrackingId: Int? = nil, productSubType: EvenProductSubType? = nil) {
        self.id = id
        self.subAccountId = subAccountId
        self.leadUuid = leadUuid
        self.eventType = eventType
        self.timestamp = timestamp
        self.createdAt = createdAt
        self.createdByUuid = createdByUuid
        self.deletedAt = deletedAt
        self.deletedByUuid = deletedByUuid
        self.details = details
        self.offerId = offerId
        self.partnerTrackingId = partnerTrackingId
        self.productSubType = productSubType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        subAccountId = try container.decode("subAccountId")
        leadUuid = try container.decode("leadUuid")
        eventType = try container.decode("eventType")
        timestamp = try container.decode("timestamp")
        createdAt = try container.decode("createdAt")
        createdByUuid = try container.decodeIfPresent("createdByUuid")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedByUuid = try container.decodeIfPresent("deletedByUuid")
        details = try container.decodeIfPresent("details")
        offerId = try container.decodeIfPresent("offerId")
        partnerTrackingId = try container.decodeIfPresent("partnerTrackingId")
        productSubType = try container.decodeIfPresent("productSubType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(subAccountId, forKey: "subAccountId")
        try container.encode(leadUuid, forKey: "leadUuid")
        try container.encode(eventType, forKey: "eventType")
        try container.encode(timestamp, forKey: "timestamp")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(createdByUuid, forKey: "createdByUuid")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedByUuid, forKey: "deletedByUuid")
        try container.encodeIfPresent(details, forKey: "details")
        try container.encodeIfPresent(offerId, forKey: "offerId")
        try container.encodeIfPresent(partnerTrackingId, forKey: "partnerTrackingId")
        try container.encodeIfPresent(productSubType, forKey: "productSubType")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenExternalDemandEvent else { return false }
      guard self.id == object.id else { return false }
      guard self.subAccountId == object.subAccountId else { return false }
      guard self.leadUuid == object.leadUuid else { return false }
      guard self.eventType == object.eventType else { return false }
      guard self.timestamp == object.timestamp else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdByUuid == object.createdByUuid else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedByUuid == object.deletedByUuid else { return false }
      guard self.details == object.details else { return false }
      guard self.offerId == object.offerId else { return false }
      guard self.partnerTrackingId == object.partnerTrackingId else { return false }
      guard self.productSubType == object.productSubType else { return false }
      return true
    }

    public static func == (lhs: EvenExternalDemandEvent, rhs: EvenExternalDemandEvent) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
