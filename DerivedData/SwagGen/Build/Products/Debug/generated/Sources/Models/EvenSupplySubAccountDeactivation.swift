//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenSupplySubAccountDeactivation: BirchModel, Decodable, AutoEquatable {

    /** A unique, internal identifier for this resource.
 */
    public var id: Int

    /** An identifier for the supply sub account that is deactivated.
 */
    public var supplySubAccountId: Int

    /** When the resource was created.
 */
    public var createdAt: DateTime

    /** The UUID of the access token that was used to create this resource.
 */
    public var createdBy: ID

    /** Reason why the supply sub account was deactivated.  
 */
    public var deactivationReason: String?

    /** When the resource was deleted.
 */
    public var deletedAt: DateTime?

    /** The UUID of the access token that was used to delete this resource.
 */
    public var deletedBy: ID?

    public init(id: Int, supplySubAccountId: Int, createdAt: DateTime, createdBy: ID, deactivationReason: String? = nil, deletedAt: DateTime? = nil, deletedBy: ID? = nil) {
        self.id = id
        self.supplySubAccountId = supplySubAccountId
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.deactivationReason = deactivationReason
        self.deletedAt = deletedAt
        self.deletedBy = deletedBy
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        supplySubAccountId = try container.decode("supplySubAccountId")
        createdAt = try container.decode("createdAt")
        createdBy = try container.decode("createdBy")
        deactivationReason = try container.decodeIfPresent("deactivationReason")
        deletedAt = try container.decodeIfPresent("deletedAt")
        deletedBy = try container.decodeIfPresent("deletedBy")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(supplySubAccountId, forKey: "supplySubAccountId")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(createdBy, forKey: "createdBy")
        try container.encodeIfPresent(deactivationReason, forKey: "deactivationReason")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
        try container.encodeIfPresent(deletedBy, forKey: "deletedBy")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenSupplySubAccountDeactivation else { return false }
      guard self.id == object.id else { return false }
      guard self.supplySubAccountId == object.supplySubAccountId else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdBy == object.createdBy else { return false }
      guard self.deactivationReason == object.deactivationReason else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      guard self.deletedBy == object.deletedBy else { return false }
      return true
    }

    public static func == (lhs: EvenSupplySubAccountDeactivation, rhs: EvenSupplySubAccountDeactivation) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
