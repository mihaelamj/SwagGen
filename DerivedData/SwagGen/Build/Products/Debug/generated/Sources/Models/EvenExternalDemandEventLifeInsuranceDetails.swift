//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EvenExternalDemandEventLifeInsuranceDetails: BirchModel, Decodable, AutoEquatable {

    public enum EvenPaymentFrequency: String, Codable, Equatable, CaseIterable {
        case monthly = "monthly"
        case quarterly = "quarterly"
        case yearly = "yearly"
        case undecodable

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self = EvenPaymentFrequency(rawValue: rawValue) ?? .undecodable
        }
    }

    public var adjustmentAmount: Float?

    public var coverageAmount: Float?

    public var paymentAmount: Float?

    public var paymentFrequency: EvenPaymentFrequency?

    public var termLength: Int?

    public init(adjustmentAmount: Float? = nil, coverageAmount: Float? = nil, paymentAmount: Float? = nil, paymentFrequency: EvenPaymentFrequency? = nil, termLength: Int? = nil) {
        self.adjustmentAmount = adjustmentAmount
        self.coverageAmount = coverageAmount
        self.paymentAmount = paymentAmount
        self.paymentFrequency = paymentFrequency
        self.termLength = termLength
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        adjustmentAmount = try container.decodeIfPresent("adjustmentAmount")
        coverageAmount = try container.decodeIfPresent("coverageAmount")
        paymentAmount = try container.decodeIfPresent("paymentAmount")
        paymentFrequency = try container.decodeIfPresent("paymentFrequency")
        termLength = try container.decodeIfPresent("termLength")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(adjustmentAmount, forKey: "adjustmentAmount")
        try container.encodeIfPresent(coverageAmount, forKey: "coverageAmount")
        try container.encodeIfPresent(paymentAmount, forKey: "paymentAmount")
        try container.encodeIfPresent(paymentFrequency, forKey: "paymentFrequency")
        try container.encodeIfPresent(termLength, forKey: "termLength")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EvenExternalDemandEventLifeInsuranceDetails else { return false }
      guard self.adjustmentAmount == object.adjustmentAmount else { return false }
      guard self.coverageAmount == object.coverageAmount else { return false }
      guard self.paymentAmount == object.paymentAmount else { return false }
      guard self.paymentFrequency == object.paymentFrequency else { return false }
      guard self.termLength == object.termLength else { return false }
      return true
    }

    public static func == (lhs: EvenExternalDemandEventLifeInsuranceDetails, rhs: EvenExternalDemandEventLifeInsuranceDetails) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
