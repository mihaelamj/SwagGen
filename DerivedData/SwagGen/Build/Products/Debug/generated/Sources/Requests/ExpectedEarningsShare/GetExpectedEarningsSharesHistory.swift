//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.ExpectedEarningsShare {

    /** Return historical of expected earnings shares */
    public enum GetExpectedEarningsSharesHistory {

        public static let service = APIService<Response>(id: "getExpectedEarningsSharesHistory", tag: "Expected Earnings Share", method: "GET", path: "/expectedEarningsShare/history", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** starting time to look at */
                public var from: [DateTime]?

                /** The number of resources to skip before the first resource in the results.
 */
                public var offset: Int?

                /** The maximum number of resources to include in the results.
 */
                public var limit: Int

                public init(from: [DateTime]? = nil, offset: Int? = nil, limit: Int) {
                    self.from = from
                    self.offset = offset
                    self.limit = limit
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetExpectedEarningsSharesHistory.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(from: [DateTime]? = nil, offset: Int? = nil, limit: Int) {
                let options = Options(from: from, offset: offset, limit: limit)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let from = options.from?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["from"] = from
                }
                if let offset = options.offset {
                  params["offset"] = offset
                }
                params["limit"] = options.limit
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [EvenExpectedEarningsShare]

            /** Success */
            case status200([EvenExpectedEarningsShare])

            public var success: [EvenExpectedEarningsShare]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenExpectedEarningsShare].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
