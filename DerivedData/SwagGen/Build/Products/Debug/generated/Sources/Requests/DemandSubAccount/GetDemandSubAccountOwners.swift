//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.DemandSubAccount {

    /**
    Get a demand sub-account owner

    Get a list of Sub Account Owners filtered by relevant query parameters
    */
    public enum GetDemandSubAccountOwners {

        public static let service = APIService<Response>(id: "getDemandSubAccountOwners", tag: "Demand Sub-Account", method: "GET", path: "/demandSubAccounts/owners", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** comma separated list of sub account owner ids */
                public var subAccountOwnerId: [Int]?

                /** comma separated list of demand partner manager uuids */
                public var subAccountOwnerDemandPartnerManager: [ID]?

                /** comma separated list of demand yield manager uuids */
                public var subAccountOwnerDemandYieldManager: [ID]?

                /** comma separated list of supply partner manager uuids */
                public var subAccountOwnerSupplydPartnerManager: [ID]?

                /** comma separated list of supply yield manager uuids */
                public var subAccountOwnerSupplyYieldManager: [ID]?

                /** comma separated list of uuids */
                public var subAccountOwnerCreatedBy: [ID]?

                /** earliest bound to look at for creation date */
                public var subAccountOwnerCreatedAtMin: DateTime?

                /** latest bound to look at for creation date */
                public var subAccountOwnerCreatedAtMax: DateTime?

                /** comma separated list of uuids */
                public var subAccountOwnerDeletedBy: [ID]?

                /** earliest bound for deletion date */
                public var subAccountOwnerDeletedAtMin: DateTime?

                /** latest time for deletion date */
                public var subAccountOwnerDeletedAtMax: DateTime?

                /** include deleted Sub Account Owners, true/false */
                public var subAccountOwnerIsDeleted: Bool?

                public init(subAccountOwnerId: [Int]? = nil, subAccountOwnerDemandPartnerManager: [ID]? = nil, subAccountOwnerDemandYieldManager: [ID]? = nil, subAccountOwnerSupplydPartnerManager: [ID]? = nil, subAccountOwnerSupplyYieldManager: [ID]? = nil, subAccountOwnerCreatedBy: [ID]? = nil, subAccountOwnerCreatedAtMin: DateTime? = nil, subAccountOwnerCreatedAtMax: DateTime? = nil, subAccountOwnerDeletedBy: [ID]? = nil, subAccountOwnerDeletedAtMin: DateTime? = nil, subAccountOwnerDeletedAtMax: DateTime? = nil, subAccountOwnerIsDeleted: Bool? = nil) {
                    self.subAccountOwnerId = subAccountOwnerId
                    self.subAccountOwnerDemandPartnerManager = subAccountOwnerDemandPartnerManager
                    self.subAccountOwnerDemandYieldManager = subAccountOwnerDemandYieldManager
                    self.subAccountOwnerSupplydPartnerManager = subAccountOwnerSupplydPartnerManager
                    self.subAccountOwnerSupplyYieldManager = subAccountOwnerSupplyYieldManager
                    self.subAccountOwnerCreatedBy = subAccountOwnerCreatedBy
                    self.subAccountOwnerCreatedAtMin = subAccountOwnerCreatedAtMin
                    self.subAccountOwnerCreatedAtMax = subAccountOwnerCreatedAtMax
                    self.subAccountOwnerDeletedBy = subAccountOwnerDeletedBy
                    self.subAccountOwnerDeletedAtMin = subAccountOwnerDeletedAtMin
                    self.subAccountOwnerDeletedAtMax = subAccountOwnerDeletedAtMax
                    self.subAccountOwnerIsDeleted = subAccountOwnerIsDeleted
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetDemandSubAccountOwners.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(subAccountOwnerId: [Int]? = nil, subAccountOwnerDemandPartnerManager: [ID]? = nil, subAccountOwnerDemandYieldManager: [ID]? = nil, subAccountOwnerSupplydPartnerManager: [ID]? = nil, subAccountOwnerSupplyYieldManager: [ID]? = nil, subAccountOwnerCreatedBy: [ID]? = nil, subAccountOwnerCreatedAtMin: DateTime? = nil, subAccountOwnerCreatedAtMax: DateTime? = nil, subAccountOwnerDeletedBy: [ID]? = nil, subAccountOwnerDeletedAtMin: DateTime? = nil, subAccountOwnerDeletedAtMax: DateTime? = nil, subAccountOwnerIsDeleted: Bool? = nil) {
                let options = Options(subAccountOwnerId: subAccountOwnerId, subAccountOwnerDemandPartnerManager: subAccountOwnerDemandPartnerManager, subAccountOwnerDemandYieldManager: subAccountOwnerDemandYieldManager, subAccountOwnerSupplydPartnerManager: subAccountOwnerSupplydPartnerManager, subAccountOwnerSupplyYieldManager: subAccountOwnerSupplyYieldManager, subAccountOwnerCreatedBy: subAccountOwnerCreatedBy, subAccountOwnerCreatedAtMin: subAccountOwnerCreatedAtMin, subAccountOwnerCreatedAtMax: subAccountOwnerCreatedAtMax, subAccountOwnerDeletedBy: subAccountOwnerDeletedBy, subAccountOwnerDeletedAtMin: subAccountOwnerDeletedAtMin, subAccountOwnerDeletedAtMax: subAccountOwnerDeletedAtMax, subAccountOwnerIsDeleted: subAccountOwnerIsDeleted)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let subAccountOwnerId = options.subAccountOwnerId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountOwnerId"] = subAccountOwnerId
                }
                if let subAccountOwnerDemandPartnerManager = options.subAccountOwnerDemandPartnerManager?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountOwnerDemandPartnerManager"] = subAccountOwnerDemandPartnerManager
                }
                if let subAccountOwnerDemandYieldManager = options.subAccountOwnerDemandYieldManager?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountOwnerDemandYieldManager"] = subAccountOwnerDemandYieldManager
                }
                if let subAccountOwnerSupplydPartnerManager = options.subAccountOwnerSupplydPartnerManager?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountOwnerSupplydPartnerManager"] = subAccountOwnerSupplydPartnerManager
                }
                if let subAccountOwnerSupplyYieldManager = options.subAccountOwnerSupplyYieldManager?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountOwnerSupplyYieldManager"] = subAccountOwnerSupplyYieldManager
                }
                if let subAccountOwnerCreatedBy = options.subAccountOwnerCreatedBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountOwnerCreatedBy"] = subAccountOwnerCreatedBy
                }
                if let subAccountOwnerCreatedAtMin = options.subAccountOwnerCreatedAtMin?.encode() {
                  params["subAccountOwnerCreatedAtMin"] = subAccountOwnerCreatedAtMin
                }
                if let subAccountOwnerCreatedAtMax = options.subAccountOwnerCreatedAtMax?.encode() {
                  params["subAccountOwnerCreatedAtMax"] = subAccountOwnerCreatedAtMax
                }
                if let subAccountOwnerDeletedBy = options.subAccountOwnerDeletedBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountOwnerDeletedBy"] = subAccountOwnerDeletedBy
                }
                if let subAccountOwnerDeletedAtMin = options.subAccountOwnerDeletedAtMin?.encode() {
                  params["subAccountOwnerDeletedAtMin"] = subAccountOwnerDeletedAtMin
                }
                if let subAccountOwnerDeletedAtMax = options.subAccountOwnerDeletedAtMax?.encode() {
                  params["subAccountOwnerDeletedAtMax"] = subAccountOwnerDeletedAtMax
                }
                if let subAccountOwnerIsDeleted = options.subAccountOwnerIsDeleted {
                  params["subAccountOwnerIsDeleted"] = subAccountOwnerIsDeleted
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [EvenSubAccountOwner]

            /** Success */
            case status200([EvenSubAccountOwner])

            public var success: [EvenSubAccountOwner]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenSubAccountOwner].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
