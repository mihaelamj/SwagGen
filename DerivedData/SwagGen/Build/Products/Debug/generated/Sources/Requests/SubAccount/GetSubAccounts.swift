//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.SubAccount {

    /** Get sub-accounts */
    public enum GetSubAccounts {

        public static let service = APIService<Response>(id: "getSubAccounts", tag: "Sub-Account", method: "GET", path: "/subAccounts", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** A comma separated list of ids */
                public var id: [Int]?

                /** A comma separated list of uuids */
                public var uuid: [ID]?

                /** A comma separated list of account ids */
                public var accountId: [Int]?

                /** A comma separated list of names */
                public var name: [String]?

                /** A comma separated list of company uuids */
                public var companyUuid: [ID]?

                /** A comma separated list of sub account display names */
                public var displayName: [String]?

                /** sub account type key */
                public var subAccountTypeKey: String?

                /** comma separated list of uuids */
                public var createdBy: [ID]?

                /** creation date of object */
                public var createdAt: DateTime?

                /** limit results */
                public var limit: Int

                /** at what offset do you want to start looking at, default 0 */
                public var offset: Int?

                /** how do you want to sort, default created_at */
                public var sortBy: String?

                public var order: EvenOrder?

                /** ignored deleted items, default true */
                public var excludeDeleted: Bool?

                public init(id: [Int]? = nil, uuid: [ID]? = nil, accountId: [Int]? = nil, name: [String]? = nil, companyUuid: [ID]? = nil, displayName: [String]? = nil, subAccountTypeKey: String? = nil, createdBy: [ID]? = nil, createdAt: DateTime? = nil, limit: Int, offset: Int? = nil, sortBy: String? = nil, order: EvenOrder? = nil, excludeDeleted: Bool? = nil) {
                    self.id = id
                    self.uuid = uuid
                    self.accountId = accountId
                    self.name = name
                    self.companyUuid = companyUuid
                    self.displayName = displayName
                    self.subAccountTypeKey = subAccountTypeKey
                    self.createdBy = createdBy
                    self.createdAt = createdAt
                    self.limit = limit
                    self.offset = offset
                    self.sortBy = sortBy
                    self.order = order
                    self.excludeDeleted = excludeDeleted
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetSubAccounts.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: [Int]? = nil, uuid: [ID]? = nil, accountId: [Int]? = nil, name: [String]? = nil, companyUuid: [ID]? = nil, displayName: [String]? = nil, subAccountTypeKey: String? = nil, createdBy: [ID]? = nil, createdAt: DateTime? = nil, limit: Int, offset: Int? = nil, sortBy: String? = nil, order: EvenOrder? = nil, excludeDeleted: Bool? = nil) {
                let options = Options(id: id, uuid: uuid, accountId: accountId, name: name, companyUuid: companyUuid, displayName: displayName, subAccountTypeKey: subAccountTypeKey, createdBy: createdBy, createdAt: createdAt, limit: limit, offset: offset, sortBy: sortBy, order: order, excludeDeleted: excludeDeleted)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let id = options.id?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["id"] = id
                }
                if let uuid = options.uuid?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["uuid"] = uuid
                }
                if let accountId = options.accountId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountId"] = accountId
                }
                if let name = options.name?.joined(separator: ",") {
                  params["name"] = name
                }
                if let companyUuid = options.companyUuid?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["companyUuid"] = companyUuid
                }
                if let displayName = options.displayName?.joined(separator: ",") {
                  params["displayName"] = displayName
                }
                if let subAccountTypeKey = options.subAccountTypeKey {
                  params["subAccountTypeKey"] = subAccountTypeKey
                }
                if let createdBy = options.createdBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["createdBy"] = createdBy
                }
                if let createdAt = options.createdAt?.encode() {
                  params["createdAt"] = createdAt
                }
                params["limit"] = options.limit
                if let offset = options.offset {
                  params["offset"] = offset
                }
                if let sortBy = options.sortBy {
                  params["sortBy"] = sortBy
                }
                if let order = options.order?.encode() {
                  params["order"] = order
                }
                if let excludeDeleted = options.excludeDeleted {
                  params["excludeDeleted"] = excludeDeleted
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [EvenLegacySubAccount]

            /** Success */
            case status200([EvenLegacySubAccount])

            /** Malformed request */
            case status400([EvenApiError])

            public var success: [EvenLegacySubAccount]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: [EvenApiError]? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[EvenLegacySubAccount], [EvenApiError]> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenLegacySubAccount].self, from: data))
                case 400: self = try .status400(decoder.decode([EvenApiError].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
