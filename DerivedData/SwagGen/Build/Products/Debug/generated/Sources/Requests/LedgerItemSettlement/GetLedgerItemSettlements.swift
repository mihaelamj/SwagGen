//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.LedgerItemSettlement {

    /**
    Get ledger item settlements

    Return ledger item settlements based upon request parameters
    */
    public enum GetLedgerItemSettlements {

        public static let service = APIService<Response>(id: "getLedgerItemSettlements", tag: "Ledger Item Settlement", method: "GET", path: "/ledgerItemSettlements", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var id: [Int]?

                public var accountId: [Int]?

                public var settlementLedgerItemId: [Int]?

                public var status: [EvenLedgerItemSettlementStatus]?

                public var startedAtMin: DateTime?

                public var startedAtMax: DateTime?

                public var completedAtMin: DateTime?

                public var completedAtMax: DateTime?

                public var createdAtMin: DateTime?

                public var createdAtMax: DateTime?

                public var createdBy: [ID]?

                /** The number of resources to skip before the first resource in the results.
 */
                public var offset: Int?

                /** The maximum number of resources to include in the results.
 */
                public var limit: Int

                /** The attribute with which to sort the resources.
 */
                public var sortBy: EvenLedgerItemSettlementSort?

                /** The direction to use for ordering resources.
 */
                public var order: EvenOrder?

                public init(id: [Int]? = nil, accountId: [Int]? = nil, settlementLedgerItemId: [Int]? = nil, status: [EvenLedgerItemSettlementStatus]? = nil, startedAtMin: DateTime? = nil, startedAtMax: DateTime? = nil, completedAtMin: DateTime? = nil, completedAtMax: DateTime? = nil, createdAtMin: DateTime? = nil, createdAtMax: DateTime? = nil, createdBy: [ID]? = nil, offset: Int? = nil, limit: Int, sortBy: EvenLedgerItemSettlementSort? = nil, order: EvenOrder? = nil) {
                    self.id = id
                    self.accountId = accountId
                    self.settlementLedgerItemId = settlementLedgerItemId
                    self.status = status
                    self.startedAtMin = startedAtMin
                    self.startedAtMax = startedAtMax
                    self.completedAtMin = completedAtMin
                    self.completedAtMax = completedAtMax
                    self.createdAtMin = createdAtMin
                    self.createdAtMax = createdAtMax
                    self.createdBy = createdBy
                    self.offset = offset
                    self.limit = limit
                    self.sortBy = sortBy
                    self.order = order
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetLedgerItemSettlements.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: [Int]? = nil, accountId: [Int]? = nil, settlementLedgerItemId: [Int]? = nil, status: [EvenLedgerItemSettlementStatus]? = nil, startedAtMin: DateTime? = nil, startedAtMax: DateTime? = nil, completedAtMin: DateTime? = nil, completedAtMax: DateTime? = nil, createdAtMin: DateTime? = nil, createdAtMax: DateTime? = nil, createdBy: [ID]? = nil, offset: Int? = nil, limit: Int, sortBy: EvenLedgerItemSettlementSort? = nil, order: EvenOrder? = nil) {
                let options = Options(id: id, accountId: accountId, settlementLedgerItemId: settlementLedgerItemId, status: status, startedAtMin: startedAtMin, startedAtMax: startedAtMax, completedAtMin: completedAtMin, completedAtMax: completedAtMax, createdAtMin: createdAtMin, createdAtMax: createdAtMax, createdBy: createdBy, offset: offset, limit: limit, sortBy: sortBy, order: order)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let id = options.id?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["id"] = id
                }
                if let accountId = options.accountId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["accountId"] = accountId
                }
                if let settlementLedgerItemId = options.settlementLedgerItemId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["settlementLedgerItemId"] = settlementLedgerItemId
                }
                if let status = options.status?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["status"] = status
                }
                if let startedAtMin = options.startedAtMin?.encode() {
                  params["startedAtMin"] = startedAtMin
                }
                if let startedAtMax = options.startedAtMax?.encode() {
                  params["startedAtMax"] = startedAtMax
                }
                if let completedAtMin = options.completedAtMin?.encode() {
                  params["completedAtMin"] = completedAtMin
                }
                if let completedAtMax = options.completedAtMax?.encode() {
                  params["completedAtMax"] = completedAtMax
                }
                if let createdAtMin = options.createdAtMin?.encode() {
                  params["createdAtMin"] = createdAtMin
                }
                if let createdAtMax = options.createdAtMax?.encode() {
                  params["createdAtMax"] = createdAtMax
                }
                if let createdBy = options.createdBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["createdBy"] = createdBy
                }
                if let offset = options.offset {
                  params["offset"] = offset
                }
                params["limit"] = options.limit
                if let sortBy = options.sortBy?.encode() {
                  params["sortBy"] = sortBy
                }
                if let order = options.order?.encode() {
                  params["order"] = order
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Return ledger item settlements based upon request parameters */
            public class Status400: BirchModel, Decodable, AutoEquatable {

                public var attribute: String?

                public var details: EvenDetails?

                public var message: String?

                public var type: String?

                public init(attribute: String? = nil, details: EvenDetails? = nil, message: String? = nil, type: String? = nil) {
                    self.attribute = attribute
                    self.details = details
                    self.message = message
                    self.type = type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    attribute = try container.decodeIfPresent("attribute")
                    details = try container.decodeIfPresent("details")
                    message = try container.decodeIfPresent("message")
                    type = try container.decodeIfPresent("type")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(attribute, forKey: "attribute")
                    try container.encodeIfPresent(details, forKey: "details")
                    try container.encodeIfPresent(message, forKey: "message")
                    try container.encodeIfPresent(type, forKey: "type")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status400 else { return false }
                  guard self.attribute == object.attribute else { return false }
                  guard self.details == object.details else { return false }
                  guard self.message == object.message else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: Status400, rhs: Status400) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = [EvenLedgerItemSettlement]

            /** Success */
            case status200([EvenLedgerItemSettlement])

            /** Invalid request */
            case status400([Status400])

            public var success: [EvenLedgerItemSettlement]? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: [Status400]? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<[EvenLedgerItemSettlement], [Status400]> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenLedgerItemSettlement].self, from: data))
                case 400: self = try .status400(decoder.decode([Status400].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
