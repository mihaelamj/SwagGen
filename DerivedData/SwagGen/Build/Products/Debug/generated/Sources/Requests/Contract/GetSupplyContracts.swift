//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.Contract {

    /**
    Get supply contracts

    Return supply contracts based on request parameters
    */
    public enum GetSupplyContracts {

        public static let service = APIService<Response>(id: "getSupplyContracts", tag: "Contract", method: "GET", path: "/supplyContracts", hasBody: false, securityRequirements: [SecurityRequirement(type: "oauth", scopes: ["finance:read"])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** A comma separated list of demand contract IDs */
                public var id: [Int]?

                /** A comma separated list of sub-account IDs */
                public var subAccountId: [Int]?

                /** contract effective at date */
                public var effectiveAt: DateDay?

                /** max effective at date for contract */
                public var effectiveAtMax: DateDay?

                /** min effective at date for contract */
                public var effectiveAtMin: DateDay?

                public var createdAtMin: DateTime?

                public var createdAtMax: DateTime?

                public var createdBy: [ID]?

                public var deletedAtMin: DateTime?

                public var deletedAtMax: DateTime?

                public var isDeleted: Bool?

                public var deletedBy: [ID]?

                /** The number of resources to skip before the first resource in the results.
 */
                public var offset: Int?

                /** The maximum number of resources to include in the results.
 */
                public var limit: Int

                /** The attribute with which to sort the resources.
 */
                public var sortBy: String?

                /** The direction to use for ordering resources.
 */
                public var order: String?

                public init(id: [Int]? = nil, subAccountId: [Int]? = nil, effectiveAt: DateDay? = nil, effectiveAtMax: DateDay? = nil, effectiveAtMin: DateDay? = nil, createdAtMin: DateTime? = nil, createdAtMax: DateTime? = nil, createdBy: [ID]? = nil, deletedAtMin: DateTime? = nil, deletedAtMax: DateTime? = nil, isDeleted: Bool? = nil, deletedBy: [ID]? = nil, offset: Int? = nil, limit: Int, sortBy: String? = nil, order: String? = nil) {
                    self.id = id
                    self.subAccountId = subAccountId
                    self.effectiveAt = effectiveAt
                    self.effectiveAtMax = effectiveAtMax
                    self.effectiveAtMin = effectiveAtMin
                    self.createdAtMin = createdAtMin
                    self.createdAtMax = createdAtMax
                    self.createdBy = createdBy
                    self.deletedAtMin = deletedAtMin
                    self.deletedAtMax = deletedAtMax
                    self.isDeleted = isDeleted
                    self.deletedBy = deletedBy
                    self.offset = offset
                    self.limit = limit
                    self.sortBy = sortBy
                    self.order = order
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetSupplyContracts.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: [Int]? = nil, subAccountId: [Int]? = nil, effectiveAt: DateDay? = nil, effectiveAtMax: DateDay? = nil, effectiveAtMin: DateDay? = nil, createdAtMin: DateTime? = nil, createdAtMax: DateTime? = nil, createdBy: [ID]? = nil, deletedAtMin: DateTime? = nil, deletedAtMax: DateTime? = nil, isDeleted: Bool? = nil, deletedBy: [ID]? = nil, offset: Int? = nil, limit: Int, sortBy: String? = nil, order: String? = nil) {
                let options = Options(id: id, subAccountId: subAccountId, effectiveAt: effectiveAt, effectiveAtMax: effectiveAtMax, effectiveAtMin: effectiveAtMin, createdAtMin: createdAtMin, createdAtMax: createdAtMax, createdBy: createdBy, deletedAtMin: deletedAtMin, deletedAtMax: deletedAtMax, isDeleted: isDeleted, deletedBy: deletedBy, offset: offset, limit: limit, sortBy: sortBy, order: order)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let id = options.id?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["id"] = id
                }
                if let subAccountId = options.subAccountId?.map({ String(describing: $0) }).joined(separator: ",") {
                  params["subAccountId"] = subAccountId
                }
                if let effectiveAt = options.effectiveAt?.encode() {
                  params["effectiveAt"] = effectiveAt
                }
                if let effectiveAtMax = options.effectiveAtMax?.encode() {
                  params["effectiveAtMax"] = effectiveAtMax
                }
                if let effectiveAtMin = options.effectiveAtMin?.encode() {
                  params["effectiveAtMin"] = effectiveAtMin
                }
                if let createdAtMin = options.createdAtMin?.encode() {
                  params["createdAtMin"] = createdAtMin
                }
                if let createdAtMax = options.createdAtMax?.encode() {
                  params["createdAtMax"] = createdAtMax
                }
                if let createdBy = options.createdBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["createdBy"] = createdBy
                }
                if let deletedAtMin = options.deletedAtMin?.encode() {
                  params["deletedAtMin"] = deletedAtMin
                }
                if let deletedAtMax = options.deletedAtMax?.encode() {
                  params["deletedAtMax"] = deletedAtMax
                }
                if let isDeleted = options.isDeleted {
                  params["isDeleted"] = isDeleted
                }
                if let deletedBy = options.deletedBy?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["deletedBy"] = deletedBy
                }
                if let offset = options.offset {
                  params["offset"] = offset
                }
                params["limit"] = options.limit
                if let sortBy = options.sortBy {
                  params["sortBy"] = sortBy
                }
                if let order = options.order {
                  params["order"] = order
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [EvenSupplyContract]

            /** Success */
            case status200([EvenSupplyContract])

            public var success: [EvenSupplyContract]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([EvenSupplyContract].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
